;{ ;; Archiv
;; Interrupt_USART_RX_Complete: ;{	;; обработка прерывания при поступлении очередного байта в приемник UART
				;; cli
				;; push r17
				;; push r16
				;; pushX
				;; in r16,SREG
				;; push r16
				
				;; out TCCR0,r10	;; стоп счетчик
				;; in r16,UDR

				;; tst ERROR
				;; brne ovr01
				
				;; sbrc STATUS,7		;; (7 бит)принято сообщение по RS232 в буфер buf_RX и оно не обработано
				;; rjmp ovr01			;; прошлое сообщение еще не обработано
				
				;; LdiZ(buf_RX)
				;; ld r17,z  			;; загрузим счетчик буфера	
				;; ;;проверка па первый байт 0xFF
				;; tst r17
				;; brne ovr03			;; не первый байт
				;; cpi r16,$FF
				;; brne ovr03			;; не тот байт
				;; SetBit STATUS,6		;; (6 бит)прием сообщения 256 байт.(от приема первого байта 0xFF до конца обработки сообщения)
	;; ovr03:
				;; inc r17
				;; brne ovr02			;; проверка на 0 (значит был 0xFF - максимум)
				;; ;; если случился перебор
				;; sbrc STATUS,6		;; (6 бит)прием сообщения 256 байт.(значит это последний байт)
				;; rjmp ovr02
				;; SetBit ERROR,7		;; (7 бит)переполнение буфера
				;; clr r17
				;; clr r16
				;; rjmp ovr01
	;; ovr02:	
				;; st z,r17			;; запишем указатель
				;; AdrZ r17
				;; tst r17
				;; brne ovr04
				;; sbrs STATUS,6		;; (6 бит)прием сообщения 256 байт.
				;; rjmp ovr04
				;; adiw zl,63			;;поскольку r17=0 здесь надо прирастить 256 для записи последнего байта
				;; adiw zl,63			;; 63 это максимум для 6 бит
				;; adiw zl,63
				;; adiw zl,63
				;; adiw zl,4
	;; ovr04:
				;; st z,r16			;; запишем принятый байт
				;; ;; запуск счетчика
				;; out TCNT0,r10		;; обнулим счетчик таймера
				;; ldi r16,0b00000011	;; (такт = 0,125мкс) * 64 * 256 = 2.048 мс
				;; out TCCR0,r16		;; пуск счетчик
	;; ovr01:		
				;; pop r16
				;; out SREG,r16
				;; popX
				;; pop r16
				;; pop r17
				;; sei
;; reti ;}
setGEN:
				mov r16,RES_ST
				cbr r16,0b00000100			;; (7 бит)сброс необходимости установить настройки генератора
				mov RES_ST,r16

				ldi zh,high(buff_command)
				ldi zl,low(buff_command)
				ld r16,z+					;; перейдем ко второму байту
				ld r16,z+					;; загрузили 2 байт (степень,запятая частоты генератора - старшие биты, младшие не используются)

				ldi r17,0b11110011			;; (1) НГ
				out PORTA,r17
				rcall strobGen

				cbr r16,0b00000101
				sbr r16,0b00001010
				out PORTA,r16				;; степень,запятая частоты генератора
				rcall strobGen

				ld r16,z+					;; загрузили 3 байт (частота: старшие биты - 1(ст) разряд, младшие - 2 разряд)
				mov r17,r16
				cbr r17,0b00000100
				sbr r17,0b00001011
				out PORTA,r17
				rcall strobGen

				swap r16
				cbr r16,0b00000011
				sbr r16,0b00001100
				out PORTA,r16
				rcall strobGen
				
				ld r16,z+					;; загрузили 4 байт (частота: старшие биты - 3 разряд, младшие - 4(мл) разряд)
				mov r17,r16
				cbr r17,0b00000010
				sbr r17,0b00001101
				out PORTA,r17
				rcall strobGen

				swap r16
				cbr r16,0b00000001
				sbr r16,0b00001110
				out PORTA,r16
				rcall strobGen
				
				ld r16,z+					;; загрузили 5 байт (степень,запятая напряжения генератора - старшие биты, младшие не используются)
				cbr r16,0b00001001
				sbr r16,0b00000110
				out PORTA,r16
				rcall strobGen
				
				ld r16,z+					;; загрузили 6 байт (напряжение: старшие биты - 1(ст) разряд, младшие - 2 разряд)
				mov r17,r16
				cbr r17,0b00001000
				sbr r17,0b00000111
				out PORTA,r17
				rcall strobGen

				swap r16
				cbr r16,0b00000111
				sbr r16,0b00001000
				out PORTA,r16
				rcall strobGen
				
				ld r16,z+					;; загрузили 7 байт (напряжение: старшие биты - 3(мл) разряд, младшие не используются)
				cbr r16,0b00000110
				sbr r16,0b00001001
				out PORTA,r16
				rcall strobGen

				out PORTA,r11				;; возврат в исходное
ret
=========================================================================================================
strobGen:
				rcall d_500mks
				cbi PORTB,0
				rcall d_1ms
				sbi PORTB,0
				rcall d_500mks
ret
=========================================================================================================
setUM:
				mov r16,RES_ST
				cbr r16,0b00000010			;; (7 бит)сброс необходимости установить настройки усилителя мощности
				mov RES_ST,r16

				ldi zh,high(buff_command)
				ldi zl,low(buff_command)
				ld r16,z+				;; перейдем ко второму байту

				ld r16,z+				;; загрузим командный байт
				;;блокировка
				sbrc r16,0				;; пропустить если бит сброшен (0)
				sbi PORTB,2				;; вывести 1
				sbrs r16,0				;; пропустить если бит установлен (1)
				cbi PORTB,2				;; вывести 0
				;;малая/полная
				sbrc r16,1				;; пропустить если бит сброшен (0)
				sbi PORTB,1				;; вывести 1
				sbrs r16,1				;; пропустить если бит установлен (1)
				cbi PORTB,1				;; вывести 0

				ld r16,z+				;; загрузим поддиапазонный байт
				out PORTC,r16			;; вывод поддиапазона
ret
=========================================================================================================
Receive_RS232:	;; прием данных с ПК
				cli				;; (1)выключаем все прерывания
				push r17			;; (2)
				push r16			;; (2)
				push xh			;; (2)
				push xl			;; (2)
				push yh			;; (2)
				push yl			;; (2)

;; для скорости 57600 длительность бита 1/57600=17,361(1)мкс
;; отсчитываем длительность стартового бита и половину первого (младшего) бита
;; от начала прерывания до чтения линии порта должно пройти примерно 
;; 26мкс = 208 машинных тактов (при f=8MHz такт=0,125мкс)
				ldi r17,8			;; (1)счетчик битов
				clr r16				;; (1)приемный байт
				rcall d_st_rs232	;; 6.625+1.875=8.5мкс ~(8.68=половина бита)

r_bit:	
				rcall d_bit_rs232	;; 16,375+0.875=17.25мкс ~(17,361=длительность бита)
				clc					;; (1)очистим флаг переноса С
				sbic PIND,2			;; пропустить если бит в порту очищен
				sec					;; (2)
				ror	r16				;; (1)циклический сдвиг вправо через флаг переноса С
				dec r17				;; (1)
				brne r_bit			;; (2)

				rcall d_bit_rs232	;; подождем до середины стопового бита
				
				ldi xh,high(byte_count)
				ldi xl,low(byte_count)
				ld r17,x			;; загрузим кол-во принятых байтов
				cpi r17,7			;; сравним с максимумом
				brpl rec2			;; перейти если при r17-8 осталось положительное число
				ldi yh,high(buff_command)
				ldi yl,low(buff_command)
				add yl,r17			;; прирастим адрес байта в буфере
				brcc rec1			;; если произошел перенос
				inc yh				;; инкременируем старший разряд
rec1:			st y,r16			;; сохраним принятый байт в буфере
				inc r17				;; инкременируем кол-во принятых байтов
				st x,r17			;; и сохраним его

rec2:			ldi r16,0b11100000	;; очистка флагов прерываний по INT0 и INT1 и INT2
				out GIFR,r16

				sbrc RES_ST,7		;; пропустить нет приема слова
				rjmp rec4
				
				mov r16,RES_ST
				sbr r16,0b10000000			;; установим состояние приема слова
				mov RES_ST,r16
				;; запуск счетчика
				out TCNT0,r10		;обнулим счетчик таймера
				ldi r16,0b00000011	;(такт = 0,125мкс) * 64 * 256 = 2.048 мс
				out TCCR0,r16		;пуск счетчик

rec4:
				pop yl
				pop yh
				pop xl
				pop xh
				pop r16
				pop r17
				sei
reti
=========================================================================================================
analizRS232:
				mov r16,RES_ST
				cbr r16,0b01000000			;; (6 бит)сброс необходимости анализа
				mov RES_ST,r16

				ldi xh,high(buff_command)
				ldi xl,low(buff_command)
				ld r17,x					;; загрузим первый байт команды

				cpi r17,$55					;; запрос PING
				brne anlz1
				;; отвечаем на PING
					mov r16,RES_ST
					sbr r16,0b00100000			;; (5 бит)необходимо отправить в ПК ответ PING
					mov RES_ST,r16
				ret
anlz1:
				cpi r17,$11					;; Команда для АСУ 6 байтная
				brne anlz2
				;; Транслируем команду в АСУ
					ldi zh,high(byte_type_command)
					ldi zl,low(byte_type_command)
					ldi r16,6
					st z,r16				;; счетчик байтов
					mov r16,RES_ST
					sbr r16,0b00010000			;; (4 бит)необходимо отправить команду в АСУ
					mov RES_ST,r16
				ret
anlz2:
				cpi r17,$12					;; Команда для АСУ короткая 3 байтная
				brne anlz3
				;; Транслируем команду в АСУ
					ldi zh,high(byte_type_command)
					ldi zl,low(byte_type_command)
					ldi r16,3
					st z,r16				;; счетчик байтов
					mov r16,RES_ST
					sbr r16,0b00010000			;; (4 бит)необходимо отправить команду в АСУ
					mov RES_ST,r16
				ret
anlz3:	
				cpi r17,$22					;; Команда для генератора
				brne anlz4
				;;Транслируем команду в генератор
					mov r16,RES_ST
					sbr r16,0b00000100			;; (2 бит) необходимо установить настройки генератора
					mov RES_ST,r16
				ret
anlz4:	
				cpi r17,$33					;; Команда для усилителя мощности
				brne anlz5
				;;Транслируем команду в усилитель мощности
					mov r16,RES_ST
					sbr r16,0b00000010			;; (1 бит) необходимо установить настройки усилителя мощности
					mov RES_ST,r16
				ret
anlz5:	
				cpi r17,$45					;; резерв
				brne anlz6
				;;
					sbi PORTB,4
					rcall d_200ms
					cbi PORTB,4
					;; rcall d_200ms
					;; rcall d_200ms
	
				ret
anlz6:	
	
	
	
ret
=========================================================================================================
.cseg	;; последний байт лишний, но на нечетное количество ругается компилятор
world_1: .db $55,$55,$55,$4F,$4B,$55,$55,$00			;; ответ PING OK
world_2: .db $45,$52,$52,$4F,$52,$52,$58,$00			;; ответ ERROR RXD
world_3: .db 7,$45,$52,$52,$4F,$52,$0D,$0A			;; "ERROR"
world_4: .db 4,$05,$01,$04,$06						;; BFB ответ
=========================================================================================================
sendPING:
				mov r16,RES_ST
				cbr r16,0b00100000		;; (5 бит)сброс необходимости отправлять в ПК ответ PING
				mov RES_ST,r16

				ldi r18,7				;; счетчик байтов
				ldi zh,high(world_1*2)
				ldi zl,low(world_1*2)

t_byte:
				lpm r16,z+
				ldi r17,8				;; счетчик битов

				cbi PORTD,0				;; стартовый бит
				rcall d_bit_rs232

t_bit:			sbrc r16,0		
				sbi PORTD,0
				sbrs r16,0
				cbi PORTD,0
				ror r16
				rcall d_bit_rs232
				dec r17
				brne t_bit

				sbi PORTD,0
				rcall d_bit_rs232		;; стоповый бит
	
				dec r18
				brne t_byte
		
ret
=========================================================================================================
sendERR_RXD:
				mov r16,RES_ST
				cbr r16,0b00001000		;; (3 бит)сброс необходимости отправлять сообщение об ошибке - удержание линии TXD АСУ
				mov RES_ST,r16

				ldi r18,7				;; счетчик байтов
				ldi zh,high(world_2*2)
				ldi zl,low(world_2*2)

t_byte0:
				lpm r16,z+
				ldi r17,8				;; счетчик битов

				cbi PORTD,0				;; стартовый бит
				rcall d_bit_rs232

t_bit0:			sbrc r16,0		
				sbi PORTD,0
				sbrs r16,0
				cbi PORTD,0
				ror r16
				rcall d_bit_rs232
				dec r17
				brne t_bit0

				sbi PORTD,0
				rcall d_bit_rs232		;; стоповый бит
	
				dec r18
				brne t_byte0
		
ret
=========================================================================================================
sendASU:
				mov r16,RES_ST
				cbr r16,0b00010000		;; (4 бит)сброс необходимости отправлять команду в АСУ
				mov RES_ST,r16

				cbi PORTD,1				;; разбудим контроллер АСУ
				rcall d_2ms
				sbi PORTD,1
				rcall d_20ms

				ldi zh,high(byte_type_command)
				ldi zl,low(byte_type_command)
				ld r18,z				;; счетчик байтов
				ldi zh,high(buff_command)
				ldi zl,low(buff_command)
				ld r16,z+				;; перейдем ко второму байту

t_byte1:
				ld r16,z+
				ldi r17,8				;; счетчик битов

				cbi PORTD,1				;; стартовый бит
				rcall d_bit_rs232

t_bit1:			sbrc r16,0		
				sbi PORTD,1
				sbrs r16,0
				cbi PORTD,1
				ror r16
				rcall d_bit_rs232
				dec r17
				brne t_bit1

				sbi PORTD,1
				rcall d_bit_rs232		;; стоповый бит
				
				dec r18
				brne t_byte1

ret
=========================================================================================================
Transmit_RS232:
		push r17

		ldi r17,8			;; счетчик битов
		cbi PORTD,0
		rcall d_bit_rs232
t_bit:	sbrc r24,0
		sbi PORTD,0
		sbrs r24,0
		cbi PORTD,0
		ror r24
		rcall d_bit_rs232
		dec r17
		brne t_bit

		sbi PORTD,0
		rcall d_bit_rs232

		mov r17,RES_ST
		cbr r17,0b01000000	;; (6 бит)
		mov RES_ST,r17


		pop r17
		ret
=========================================================================================================
Receive_ASU:	;; прием данных с АСУ
				cli
				push r16
				
				sbic PIND,3			;; пропустить если бит в порту очищен
				rjmp rcasu_1
				низкий уровень на входе (0)
				cbi PORTD,0

				запустим счетчик аварийного удержания линии в низком состоянии
				out TCNT2,r10		;; обнулим счетчик таймера
				ldi r16,0b00000011	;; (такт = 0,125мкс) * 64 * 256 = 2.048 мс
				out TCCR2,r16		;; пуск счетчик
			
			
				rjmp rcasu_exit

rcasu_1:		;; высокий уровень на входе (1)
				sbi PORTD,0
				
				остановим счетчик аварийного удержания линии в низком состоянии
				out TCCR2,r10	;; стоп счетчик




rcasu_exit:		
				pop r16
				sei
reti
=========================================================================================================
over_82:	;; переполнение 2-го 8-разрядного счетчика (АСУ удерживает линию в низком состоянии очень долго)
				cli
				push r16

				out TCCR2,r10	;; стоп счетчик
				sbi PORTD,0				;; освободим линию TXD (от ТПАСУ к ПК)

				mov r16,RES_ST
				sbr r16,0b00001000		;; (3 бит)необходимо отправить в ПК сообщение об ошибке удержания линии RXD АСУ
				mov RES_ST,r16

				pop r16
				sei
reti
=========================================================================================================
Transmit_ASU:
		cbi PORTD,0			;; разбудим АСУ
		rcall d_bit_rs232
		sbi PORTD,0	
		rcall d_20mks		;; подождем  маленько
		ldi r16,1
		ldi xh,high(byte_count)
		ldi xl,low(byte_count)
		ld r17,x			;; загрузим кол-во принятых байтов
		ldi yh,high(buff_command)
		ldi yl,low(buff_command)
tr_2:	add yl,r16			;; прирастим адрес байта в буфере
		brcc tr_1			;; если произошел перенос
		inc yh				;; инкременируем старший разряд
tr_1:	ld r25,y			;; загрузим байт из буфера
		rcall Send_ASU
		
		inc r16
		cp r17,r16
		brne tr_2

		mov r17,RES_ST
		cbr r17,7			;; слово отправлено, сбросим бит
		mov RES_ST,r17
		st x,r10			;; обнулим кол-во принятых байтов
		ret
=========================================================================================================
Send_ASU: 
		push r17

		ldi r17,8			;; счетчик битов
		cbi PORTD,0
		rcall d_bit_rs232
t_b11:	sbrc r25,0
		sbi PORTD,1
		sbrs r25,0
		cbi PORTD,0
		ror r25
		rcall d_bit_rs232
		dec r17
		brne t_b11

		sbi PORTD,0
		rcall d_bit_rs232

		pop r17
		ret 
;}
