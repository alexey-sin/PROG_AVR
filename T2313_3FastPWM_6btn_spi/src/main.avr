;{ ;; ************************************************************************************* 
;; Прошивка для контроллера ATtiny2313 
;; схема в Proteus`е прилагается.
;; 
;; схема состоит из 3-х каналов ШИМ (вентиляторы W1-W3), шести кнопок (+ и - для ручного управления каждым каналом ШИМ)
;; и порт USI для связи с центральным контроллером
;; 
;; PA2 RESET
;; PB2 (16 выв.) OC1B - ШИМ канал W1
;; PB3 (15 выв.) OC1A - ШИМ канал W2
;; PB4 (14 выв.) OC0A - ШИМ канал W3
;; 
;; PD4 (8 выв.)	Светодиод (ошибочное состояние пакета)
;; 
;; PB7 (19 выв.) SCK	- прием синхроимпульсов
;; PB6 (18 выв.) MISO	- не используется
;; PB5 (17 выв.) MOSI	- прием данных
;; 
;; PD3 (7 выв.) +W1 для ручного управления
;; PD2 (6 выв.) -W1 для ручного управления
;; PA0 (5 выв.) +W2 для ручного управления
;; PA1 (4 выв.) -W2 для ручного управления
;; PD1 (3 выв.) +W3 для ручного управления
;; PD0 (2 выв.) -W3 для ручного управления
;; 
;; *************************************************************************************
;; Протокол обмена с центральным контроллером:
;; принимаемые пакеты состоят из 3-х байтов: 1 - номер канала 1,2,3; 2 - заполнение ШИМ 0-255; 3 - контрольная сумма (арифм.)
;; Пакеты передаются старшим байтом вперед и старшим битом вперед.
;; Линия SCK в низком уровне, данные с вывода MOSI принимаем по растущему фронту.
;; Буфер состоит из 3-х байтов, байт принимаемого бита(BitPack) и байт принимаемого байта(BytePack).
;; При приеме каждого бита перезапускаем таймер1(16бит) настроенный на 2мс
;; По срабатыванию таймера анализируем что приняли и обнуляем BitPack и BytePack
;; 
;; 
;; 
;; 
;}
;;=========================================================================================================
 ;{		;; Фьюзы
 ;; для F = 8 МГц (внутренний RC генератор) и медленный старт
;; Фьюзы: для USBASP 1 => установленный бит => галки нет
;;					0 => сброшенный бит => отмечено галкой
;; все биты LOCK установлены
;;---- Fuse High BYTE ----
;; DWEN - 1				(если V и LOCK не установлены влючается режим отладки debugWIRE через вывод RESET
;; EESAVE - 1
;; SPIEN - 0 (недоступен)
;; WDTON - 1
;; BODLEVEL2 - 1
;; BODLEVEL1 - 1
;; BODLEVEL0 - 1
;; RSTDISBL - 1
;;---- Fuse Low BYTE ----
;; CKDIV8 - 1
;; CKOUT - 1
;; SUT1 - 1
;; SUT0 - 0
;; CKSEL3 - 0
;; CKSEL2 - 1
;; CKSEL1 - 0
;; CKSEL0 - 0
;;---- Fuse Extended BYTE ----
;;
;; SELFPRGEN - 1
;;
;; он-лайн калькулятор по фьюзам
;; https://eleccelerator.com/fusecalc/fusecalc.php?chip=attiny2313
;}
;; *************************************************************************************
.equ	set_value_start	= 250		;; начальная уставка температуры
;; *************************************************************************************
.include "macros.avr"
.include "..\..\_AVR_ASSEMBLER\DEFs\tn2313def.inc"
.equ 	t1			=$60
.equ 	t2			=$61
.equ 	t3			=$62
;;=========================================================================================================
.eseg ;{	;;сектор EEPROM энергоНЕзависимая память 128 байт
;; .org 0x000	;; EEPROM прошивать ненадо, эти номера контроллер запишет сам при настройке
;; ;; значения частот и шага записаны с младшего байта к старшему
;; eFstart:	.db 0x98,0x3A,0x00	;; стартовая частота 15000 (1500.0 кГц)
;; .org 0x003
;; eFstop:		.db 0xDF,0x93,0x04	;; конечная частота 299999 (29999.9 кГц)
;; .org 0x006
;; eFstep:		.db 0x64,0x00,0x00	;; шаг перестройки 100 (10.0 кГц)
;; .org 0x009
;; e:	.db 0x98,0x3A,0x00	;; 
;}
;;=========================================================================================================
.dseg ;{	;;сектор ОЗУ
.org 0x063
bf_pack:		.BYTE 3		;; буфер принимаемой команды (первый байт - старший разряд)
BitPack:		.BYTE 1		;; номер обновляемого бита
BytePack:		.BYTE 1		;; номер обновляемого байта
;}
;;=========================================================================================================
.def STATUS			= r15 ;{		;; регистр состояния
	;; STATUS: 7бит - 1 = 
	;; STATUS: 6бит - 1 = 
	;; STATUS: 5бит - 1 = 
	;; STATUS: 4бит - 1 = 
	;; STATUS: 3бит - 1 = ошибка приема по SPI
	;; STATUS: 2бит - 1 =
	;; STATUS: 1бит - 1 =
	;; STATUS: 0бит - 1 = переполнение счетчика 1(16бит) 2мс
;}
;{ 
.def CntPWM			= r6 		;; регистр счета каналов PWM
;; регистры сравнения 0 - 255:
;; если 0 то на выходе нет импульсов (низкий уровень)
;; и если 255 то полное заполнение (всегда высокий уровень)
.def PWM1			= r7 		;; регистр сравнения канала PWM1
.def PWM2			= r8 		;; регистр сравнения канала PWM2
.def PWM3			= r9 		;; регистр сравнения канала PWM3
;}
;;=========================================================================================================
.cseg ;{	;; Таблица прерываний  - каждый адрес/ссылка = 2 байта
.org 0x0000		rjmp start
.org	INT0addr		reti	;; External Interrupt Request 0
.org	INT1addr		reti	;; External Interrupt Request 1
.org	ICP1addr		reti	;; Timer/Counter1 Capture Event
.org	OC1Aaddr		reti	;; Timer/Counter1 Compare Match A
.org	OVF1addr		rjmp Interrupt_OverFlow_161		;; Timer/Counter1 Overflow (при переполнении счетчика(16бит))
.org	OVF0addr		rjmp Interrupt_OverFlow_80		;; Timer/Counter0 Overflow (при переполнении счетчика(8бит))
.org	URXCaddr		reti	;; rjmp Interrupt_USART_RX_Complete	;; USART, Rx Complete (при возникновении прерывания RXC)
.org	UDREaddr		reti	;; USART Data Register Empty
.org	UTXCaddr		reti	;; USART, Tx Complete
.org	ACIaddr			reti	;; Analog Comparator
.org	PCIaddr			rjmp Interrupt_PCINT	;; при изменении сигналов на выводах PB0-7
.org	OC1Baddr		reti	;; 
.org	OC0Aaddr		reti	;; 
.org	OC0Baddr		reti	;; 
.org	USI_STARTaddr	reti	;; USI Start Condition
.org	USI_OVFaddr		reti	;; USI Overflow
.org	ERDYaddr		reti	;; 
.org	WDTaddr			reti	;; Watchdog Timer Overflow
;}	
;;=========================================================================================================
.org 0x018
start: ;{
	ldi r16,low(RAMEND)
	out spl,r16

	clr r10					;; R10 - 00000000
	SER r16
	mov r11,r16				;; R11 - 11111111
;;=========================================================================================================
;; Настройка портов => DDRx = 1(out); 0 = (IN)   PORTx = 1(подтянут к +); 0(в воздухе - 0)
;; Порт A (-,-,-,-,-,2,1,0) см.выше
	ldi r16,0b00000000
	out DDRA,r16
	ldi r16,0b00000011
	out PORTA,r16

;; Порт B (7,6,5,4,3,2,1,0) см.выше
	ldi r16,0b00011100
	out DDRB,r16
	ldi r16,0b00000000
	out PORTB,r16

;; Порт D (-,6,5,4,3,2,1,0)	см.выше
	ldi r16,0b00010000
	out DDRD,r16
	ldi r16,0b00001111
	out PORTD,r16
;;=========================================================================================================
;; Аналоговый компаратор		(Отключение 0b10000000 => ACSR)
	ldi r16,0b01000000
	out ACSR,r16
	ldi r16,0b00000010		;; Блокируем цифровой ввод по AIN1
	out DIDR,r16
;;=========================================================================================================
;; Настройка UART на 38400 bps(бод)
	;; out UBRRH,r10	;; предделитель старший разряд
	;; ldi r16,25		;; UBRR = 16000000/(16 * 38400) - 1 = 25,04 //при U2X = 0
	;; out UBRRL,r16	;; предделитель младший разряд
	;; out UCSRA,r10	;; ускоритель скорости на 2 выключим (U2X = 0 - 1 бит UCSRA)
	;; ldi r16,(1 << TXEN)|(1 << RXEN)|(1 << RXCIE)	;; вкл приемник(RXEN=1),вкл передатчик(TXEN=1),вкл прерывание по приему(RXCIE=1)
	;; out UCSRB,r16
	;; ldi r16,(3 << UCSZ0)	;; асинхронный режим(UMSEL=0), 8 бит(UCSZ2-0=011), 1 стоп-бит(USBS=0),без контроля четности(UPM1-0=00)
	;; out UCSRC,r16
;;=========================================================================================================
;; Настройка таймеров
	ldi r16,(1 << TOIE0 | 1 << TOIE1)		;; TOIE0 разрешить прерывание по переполнению 0(8разр) счетчика
	out TIMSK,r16				;; TOIE1 разрешить прерывание по переполнению 1(16разр) счетчика
	ldi r16,(1 << PSR10)		;; сброс прескалера таймеров 1 и 0
	out GTCCR,r16
	
	;; Запускаем 8 битный счетчик. Прерывание по переполнению.
	out TCNT0,r10			;; сброс счетного регистра
	out TCCR0A,r10
	ldi r16,0b00000001		;; (8М)0,125мкс*256 = 32мкс (переполнение счетчика)
	out TCCR0B,r16

	;; ;; Запускаем 16 битный счетчик. Прерывание по переполнению.
	;; out TCNT1H,r10			;; сброс счетных регистров
	;; out TCNT1L,r10
	;; out TCCR1A,r10
	;; ldi r16,0b00000101		;; (8М)0,125мкс*65535*1024 = 2,048мс (переполнение счетчика)
	;; out TCCR1B,r16
;;=========================================================================================================
;; Прерывания по выводам PCINT7-0
	ldi r16,(1 << PCIE)		;; PCIE разрешить прерывание по выводам PCINT7-0
	out GIMSK,r16
	ldi r16,(1 << PCINT7)	;; прерывание по SCK
	out PCMSK,r16
;;=========================================================================================================
;; инициализация буферов и переменных
	clr STATUS
	;; clr BUTTON		;; обнулим состояние кнопок
	
	mov CntPWM,r10
	mov PWM1,r10
	mov PWM2,r10
	mov PWM3,r10
	rcall d_1sec
	
	;; обнуляем значение буфера и счетчиков бит и байтов
	LdiX bf_pack	;; записываем в озу
	st x+,r10
	st x+,r10
	st x,r10
	LdiX BitPack
	st x,r10
	LdiX BytePack
	st x,r10
	
	
	sei
;}
;;=========================================================================================================
loop: ;{
				rcall CheckButton

				sbrc STATUS,0		;; переполнение счетчика 1(16бит) 2мс
				rcall CheckPacket
				
				sbrc STATUS,3		;; ошибка по SPI
				rcall ErrorSPI
				
rjmp loop ;}
;;=========================================================================================================
ErrorSPI: ;{	;; 
				sbi PORTD,4
				rcall d_1sec
				cbi PORTD,4
				ClrBit STATUS,3			;; сбросим флаг
ret ;}
CheckPacket: ;{	;; 
;; Проверка буфера приема:
;; BitPack = 0
;; BytePack = 3
;; bf_pack[2] = арифметическая сумма bf_pack[0] и bf_pack[1]
;; если эти условия не соблюдаются - ошибка приема

				lds r16,BitPack
				lds r17,BytePack
				tst r16
				brne chpck_err
				cpi r17,3
				brne chpck_err
				LdiX bf_pack
				ld r16,x				;; номер канала ШИМ
				ld r19,x+				;; номер канала ШИМ (копия)
				ld r17,x+				;; заполнение ШИМ
				ld r18,x				;; контрольный байт
				add r16,r17
				cp r16,r18
				brne chpck_err
				;; пакет проверен
				cbi PORTD,4				;;светодиод
				cpi r19,1
				brne chpck_01
				mov PWM1,r17
				rjmp chpck_exit
	chpck_01:	cpi r19,2
				brne chpck_02
				mov PWM2,r17
				rjmp chpck_exit
	chpck_02:	cpi r19,3
				brne chpck_err
				mov PWM3,r17
				rjmp chpck_exit
	chpck_err:
				SetBit STATUS,3			;; ошибка приема по SPI
	chpck_exit:
				sts BitPack,r10
				sts BytePack,r10

				ClrBit STATUS,0			;; сбросим флаг
ret ;}
CheckButton: ;{	;; 
;; PD3 (7 выв.) +W1 для ручного управления
;; PD2 (6 выв.) -W1 для ручного управления
;; PA0 (5 выв.) +W2 для ручного управления
;; PA1 (4 выв.) -W2 для ручного управления
;; PD1 (3 выв.) +W3 для ручного управления
;; PD0 (2 выв.) -W3 для ручного управления
				sbic PIND,3			;; +W1
				rjmp chbt_01
				cp PWM1,r11
				breq chbt_06
				mov r16,PWM1
				inc r16
				mov PWM1,r16
				rjmp chbt_06
	chbt_01:
				sbic PINA,0			;; +W2
				rjmp chbt_02
				cp PWM2,r11
				breq chbt_06
				mov r16,PWM2
				inc r16
				mov PWM2,r16
				rjmp chbt_06
	chbt_02:
				sbic PIND,1			;; +W3
				rjmp chbt_03
				cp PWM3,r11
				breq chbt_06
				mov r16,PWM3
				inc r16
				mov PWM3,r16
				rjmp chbt_06
	chbt_03:
				sbic PIND,2			;; -W1
				rjmp chbt_04
				tst PWM1
				breq chbt_06
				mov r16,PWM1
				dec r16
				mov PWM1,r16
				rjmp chbt_06
	chbt_04:
				sbic PINA,1			;; -W2
				rjmp chbt_05
				tst PWM2
				breq chbt_06
				mov r16,PWM2
				dec r16
				mov PWM2,r16
				rjmp chbt_06
	chbt_05:
				sbic PIND,0			;; -W3
				rjmp chbt_exit
				tst PWM3
				breq chbt_06
				mov r16,PWM3
				dec r16
				mov PWM3,r16
	chbt_06:
				rcall d_20ms
	chbt_exit:
ret ;}
;;=========================================================================================================
Interrupt_OverFlow_80: ;{	;;
				cli
				pushSREGr16
				push r17
				
				mov r16,CntPWM
				inc r16
				mov CntPWM,r16
				tst CntPWM
				brne iof8_01
				;; включаем каналы 
				tst PWM1
				breq iof8_011
				sbi PORTB,2			;; канал 1 PWM
	iof8_011:	
				tst PWM2
				breq iof8_012
				sbi PORTB,3			;; канал 2 PWM
	iof8_012:	
				tst PWM3
				breq iof8_exit
				sbi PORTB,4			;; канал 3 PWM
				rjmp iof8_exit
	iof8_01:	;; проверяем - не пора ли выключать
				cp PWM1,CntPWM
				brsh iof8_02
				cbi PORTB,2			;; канал 1 PWM
	iof8_02:	
				cp PWM2,CntPWM
				brsh iof8_03
				cbi PORTB,3			;; канал 2 PWM
	iof8_03:	
				cp PWM3,CntPWM
				brsh iof8_exit
				cbi PORTB,4			;; канал 3 PWM
	iof8_exit:

				pop r17
				popSREGr16
				sei
reti ;}
Interrupt_OverFlow_161: ;{	;;
				cli
				pushSREGr16
				
				out TCCR1B,r10		;; стоп таймер
				SetBit STATUS,0

				popSREGr16
				sei
reti ;}
Interrupt_PCINT: ;{	;; прерывание по SCK
				cli
				sbis PINB,7
				rjmp ipcint_exit
				;; значит растущий фронт
				pushSREGr16
				pushX
				push r17
				push r18
				
				sbi PORTD,4		;;светодиод
				lds r17,BitPack
				lds r16,BytePack
				LdiX bf_pack
				add xl, r16
				adc xh,r10
				ld r18,x		;; загрузили обновляемый байт
				clc				;; очистить флаг переноса С
				sbic PINB,5			;; MOSI
				sec				;; установить флаг переноса С
				rol r18			;; сдвиг влево через С
				inc r17
				cpi r17,8
				brne sbtbf_01
				clr r17
				inc r16
	sbtbf_01:
				st x,r18		;; сохраним принятый бит в байте
				sts BitPack,r17		;; сохраним номер следующего принимаемого бита
				sts BytePack,r16		;; сохраним номер принимаемого байта
				
				out TCCR1B,r10		;;стоп таймер
				out TCNT1H,r10		;;запустим таймер
				out TCNT1L,r10
				ldi r16,0b00000001		;; (8М)0,125мкс*(65535-0xC17F) = 8,048мс (переполнение счетчика)
				out TCCR1B,r16
				
				pop r18
				pop r17
				popX
				popSREGr16
	ipcint_exit:
				sei
reti ;}
;;=========================================================================================================
.include "delay8.avr"
;;=========================================================================================================



























