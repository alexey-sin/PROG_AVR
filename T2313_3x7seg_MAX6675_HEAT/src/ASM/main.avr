;{ ;; ************************************************************************************* 
;; * Прошивка для контроллера ATtiny2313 
;; * схема в Proteus`е прилагается.
;; * 
;; * схема состоит из 3-х разрядного 7-ми сегментного индикатора, трех кнопок и свободный пока порт USI
;; * 
;; * PA2 RESET
;; * PA1 сегмент точка
;; * PA0 1 разряд (старший)
;; * 
;; * PB0 3 разряд (младший)
;; * PB1 2 разряд
;; * PB2 кнопка "М"
;; * PB3 кнопка "+"
;; * PB4 кнопка "-"
;; * PB5 зарезервировано для SCL
;; * PB6 зарезервировано для MISO
;; * PB7 зарезервировано для CE
;; * 
;; * PD0 - PD6 => 7 сегментов
;; * 
;; * 
;; * 
;; * 
;; *************************************************************************************
;}
;;=========================================================================================================
 ;{		;; Фьюзы
 ;; для F = 8 МГц (внутренний RC генератор) и медленный старт
;; Фьюзы: для USBASP 1 => установленный бит => галки нет
;;					0 => сброшенный бит => отмечено галкой
;; все биты LOCK установлены
;;---- Fuse High BYTE ----
;; DWEN - 1				(если V и LOCK не установлены влючается режим отладки debugWIRE через вывод RESET
;; EESAVE - 1
;; SPIEN - 0 (недоступен)
;; WDTON - 1
;; BODLEVEL2 - 1
;; BODLEVEL1 - 1
;; BODLEVEL0 - 1
;; RSTDISBL - 1
;;---- Fuse Low BYTE ----
;; CKDIV8 - 1
;; CKOUT - 1
;; SUT1 - 1
;; SUT0 - 0
;; CKSEL3 - 0
;; CKSEL2 - 1
;; CKSEL1 - 0
;; CKSEL0 - 0
;;---- Fuse Extended BYTE ----
;;
;; SELFPRGEN - 1
;;
;; он-лайн калькулятор по фьюзам
;; https://eleccelerator.com/fusecalc/fusecalc.php?chip=attiny2313
;}
;; *************************************************************************************
.EQU	set_value_start	= 250		;; начальная уставка температуры
;; *************************************************************************************
.INCLUDE "macros.avr"
.INCLUDE "..\..\_AVR_ASSEMBLER\DEFs\tn2313def.INC"
.EQU 	t1			=$60
.EQU 	t2			=$61
.EQU 	t3			=$62
;;=========================================================================================================
.ESEG ;{	;;сектор EEPROM энергоНЕзависимая память 128 байт
;; .ORG 0x000	;; EEPROM прошивать ненадо, эти номера контроллер запишет сам при настройке
;; ;; значения частот и шага записаны с младшего байта к старшему
;; eFstart:	.db 0x98,0x3A,0x00	;; стартовая частота 15000 (1500.0 кГц)
;; .ORG 0x003
;; eFstop:		.db 0xDF,0x93,0x04	;; конечная частота 299999 (29999.9 кГц)
;; .ORG 0x006
;; eFstep:		.db 0x64,0x00,0x00	;; шаг перестройки 100 (10.0 кГц)
;; .ORG 0x009
;; e:	.db 0x98,0x3A,0x00	;; 
;}
;;=========================================================================================================
.DSEG ;{	;;сектор ОЗУ
.ORG 0x063
bf_num:			.BYTE 3		;; буфер выводимых на дисплей цифр (первый байт - старший разряд)
dig_out:		.BYTE 1		;; номер обновляемого разряда
shake_cnt:		.BYTE 2		;; счетчик антидребезга
lcd_blink:		.BYTE 1		;; счетчик пауз мигания разрядов
diskrets_acp:	.BYTE 2		;; сырые данные принятые с АЦП MAX6675
set_value:		.BYTE 2		;; уставка 
;}
;;=========================================================================================================
.EQU BLINK_CNT = 100
.DEF STATUS			= r15 ;{		;; регистр состояния
	;; STATUS: 7бит - 1 = Ошибка кнопок (замыкание, слишком длинное нажатие или срабатывание нескольких кнопок одновременно)
	;; STATUS: 6бит - 1 = 
	;; STATUS: 5бит - 1 = 
	;; STATUS: 4бит - 1 = 
	;; STATUS: 3бит - 1 = 
	;; STATUS: 2бит - 1 = принято значение АЦП
	;; STATUS: 1бит - 1 = пришло время считать температуру
	;; STATUS: 0бит - 1 = тик каждые 2,048мс от счетчика 0(8бит)
;}
.DEF BUTTON			= r14 ;{		;; регистр кнопок
	;; BUTTON: 7бит - 1= Разрешен счет счетчика антидребезга (shake)
	;; BUTTON: 6бит - 1= длинное нажатие
	;; BUTTON: 5бит - 1= длинное нажатие отработано
	;; BUTTON: 4бит - 1= короткое нажатие
	;; BUTTON: 3бит - 1= короткое нажатие отработано
	;; BUTTON: 2бит - 1= нажата кнопка "-"	(предыдущее состояние)
	;; BUTTON: 1бит - 1= нажата кнопка "+"	(предыдущее состояние)
	;; BUTTON: 0бит - 1= нажата кнопка "М"	(предыдущее состояние)
	;;
	;; антидребезг - нажатие на кнопку менее чем на 40мс (значение менее 20 shake_cnt) - игнорируем.
	;; нажатие более 2сек воспринимаем как длинное нажатие (значение менее 1024 shake_cnt ~ 2.1сек)
	;; нажатие на более чем 134 сек (переполнение 2-х байтового счетчика shake_cnt с тактом 2мс) 
	;;	воспринимаем как ошибку кнопок 
	;; одновременное нажатие нескольких кнопок - ошибка кнопок
	;; после ошибки кнопок выводим Ebt, считаем до 0,5сек и сбрасываем
;}	
.DEF LCD		= r13 ;{		;; предыдущее состояние кнопок
	;; LCD: 3бит - 1= горит мигающий разряд
	;; LCD: 2бит - 1= режим мигания старший разряд
	;; LCD: 1бит - 1= режим мигания средний разряд
	;; LCD: 0бит - 1= режим мигания младший разряд
;}	
;;=========================================================================================================
.CSEG ;{	;; Таблица прерываний  - каждый адрес/ссылка = 2 байта
.ORG 0x0000		RJMP start
.ORG	INT0addr		RETI	;; External Interrupt Request 0
.ORG	INT1addr		RETI	;; External Interrupt Request 1
.ORG	ICP1addr		RETI	;; Timer/Counter1 Capture Event
.ORG	OC1Aaddr		RETI	;; Timer/Counter1 Compare Match A
.ORG	OVF1addr		RETI	;; RJMP Interrupt_OverFlow_161		;; Timer/Counter1 Overflow (при переполнении счетчика(16бит))
.ORG	OVF0addr		RJMP Interrupt_OverFlow_80		;; Timer/Counter0 Overflow (при переполнении счетчика(8бит))
.ORG	URXCaddr		RETI	;; RJMP Interrupt_USART_RX_Complete	;; USART, Rx Complete (при возникновении прерывания RXC)
.ORG	UDREaddr		RETI	;; USART Data Register Empty
.ORG	UTXCaddr		RETI	;; USART, Tx Complete
.ORG	ACIaddr			RETI	;; Analog Comparator
.ORG	PCIaddr			RJMP Interrupt_PCINT	;; при изменении сигналов на выводах PB0-7
.ORG	OC1Baddr		RETI	;; 
.ORG	OC0Aaddr		RETI	;; 
.ORG	OC0Baddr		RETI	;; 
.ORG	USI_STARTaddr	RETI	;; USI Start Condition
.ORG	USI_OVFaddr		RETI	;; USI Overflow
.ORG	ERDYaddr		RETI	;; 
.ORG	WDTaddr			RETI	;; Watchdog Timer Overflow
;}	
;;=========================================================================================================
.ORG 0x018
start: ;{
	LDI r16,low(RAMEND)
	OUT spl,r16

	CLR r10					;; R10 - 00000000
	SER r16
	MOV r11,r16				;; R11 - 11111111
;;=========================================================================================================
;; Настройка портов => DDRx = 1(OUT); 0 = (IN)   PORTx = 1(подтянут к +); 0(в воздухе - 0)
;; Порт A (-,-,-,-,-,2,1,0) см.выше
	LDI r16,0b00000011
	OUT DDRA,r16
	OUT PORTA,r10

;; Порт B (7,6,5,4,3,2,1,0) см.выше
	LDI r16,0b10100011
	OUT DDRB,r16
	LDI r16,0b10011100
	OUT PORTB,r16

;; Порт D (-,6,5,4,3,2,1,0)	см.выше
	LDI r16,0b01111111
	OUT DDRD,r16
	OUT PORTD,r10
;;=========================================================================================================
;; Аналоговый компаратор		(Отключение 0b10000000 => ACSR)
	LDI r16,0b01000000
	OUT ACSR,r16
	LDI r16,0b00000010		;; Блокируем цифровой ввод по AIN1
	OUT DIDR,r16
;;=========================================================================================================
;; Настройка UART на 38400 bps(бод)
	;; OUT UBRRH,r10	;; предделитель старший разряд
	;; LDI r16,25		;; UBRR = 16000000/(16 * 38400) - 1 = 25,04 //при U2X = 0
	;; OUT UBRRL,r16	;; предделитель младший разряд
	;; OUT UCSRA,r10	;; ускоритель скорости на 2 выключим (U2X = 0 - 1 бит UCSRA)
	;; LDI r16,(1 << TXEN)|(1 << RXEN)|(1 << RXCIE)	;; вкл приемник(RXEN=1),вкл передатчик(TXEN=1),вкл прерывание по приему(RXCIE=1)
	;; OUT UCSRB,r16
	;; LDI r16,(3 << UCSZ0)	;; асинхронный режим(UMSEL=0), 8 бит(UCSZ2-0=011), 1 стоп-бит(USBS=0),без контроля четности(UPM1-0=00)
	;; OUT UCSRC,r16
;;=========================================================================================================
;; Настройка таймеров
	LDI r16,(1 << TOIE0)|(1 << TOIE1)		;; TOIE0 разрешить прерывание по переполнению 0(8разр) счетчика
	OUT TIMSK,r16							;; TOIE1 разрешить прерывание по переполнению 1(16разр) счетчика
	LDI r16,(1 << PSR10)	;; сброс прескалера таймеров 1 и 0
	OUT GTCCR,r16
	
	;; Запускаем 8 битный счетчик. Прерывание по переполнению.
	OUT TCNT0,r10			;; сброс счетного регистра
	OUT TCCR0A,r10
	LDI r16,0b00000011		;; (8М)0,125мкс*256*64 = 2,048мс (переполнение счетчика)
	OUT TCCR0B,r16

	;; ;; Запускаем 16 битный счетчик. Прерывание по переполнению.
	;; OUT TCNT1H,r10			;; сброс счетных регистров
	;; OUT TCNT1L,r10
	;; OUT TCCR1A,r10
	;; LDI r16,0b00000101		;; (8М)0,125мкс*65535*1024 = 2,048мс (переполнение счетчика)
	;; OUT TCCR1B,r16
;;=========================================================================================================
;; Прерывания по выводам PCINT7-0
	LDI r16,(1 << PCIE)		;; PCIE разрешить прерывание по выводам PCINT7-0
	OUT GIMSK,r16
	LDI r16,(1 << PCINT2 | 1 << PCINT3 | 1 << PCINT4)
	OUT PCMSK,r16
;;=========================================================================================================
;; инициализация буферов и переменных
	CLR STATUS
	CLR BUTTON		;; обнулим состояние кнопок
	CLR LCD
	
	OUT PORTD,r11	;; засветим все сегменты
	SBI PORTA,1		;; point
	SBI PORTB,0
	SBI PORTB,1
	SBI PORTA,0
	RCALL d_500ms
	OUT PORTD,r10	;; погасим все сегменты
	CBI PORTA,1		;; point
	CBI PORTB,0
	CBI PORTB,1
	CBI PORTA,0
	RCALL d_500ms
	
	;; обнуляем значение буфера
	LdiX(bf_num)	;; записываем в озу
	ST x+,r10
	ST x+,r10
	ST x+,r10
	ST x,r10
	LdiX lcd_blink
	ST x,r10
	
	;; перенесем начальную уставку в ОЗУ
	LdiX set_value
	LDI r16,HIGH(set_value_start)
	LDI r17,LOW(set_value_start)
	ST x+,r16
	ST x,r17
	
	SEI
;}
;;=========================================================================================================
loop: ;{
;; OUT PORTD,r11
;; SBI PORTB,0
;; SBI PORTB,1
;; SBI PORTA,0
;; SBI PORTA,1		;;point
;; RJMP loop
	
				SBRC STATUS,0		;; тик каждые 2,048мс
				RCALL TickProcess
				
				SBRC STATUS,1		;; пришло время считать температуру
				RCALL ReadACPOfMAX6675
				;; RCALL test1
				
				SBRC STATUS,2		;; принято значение АЦП
				RCALL CalculationACP
				
				
				SBRC BUTTON,3		;; короткое нажатие кнопки отработано
				RJMP lp001
				SBRC BUTTON,4		;; короткое нажатие кнопки
				RCALL Button_short
	lp001:
				SBRC BUTTON,5		;; длинное нажатие кнопки отработано
				RJMP lp002
				SBRC BUTTON,6		;; длинное нажатие кнопки
				RCALL Button_long
	lp002:

				


RJMP loop ;}
;;=========================================================================================================
ReadACPOfMAX6675: ;{	;; 
;; * PB5 зарезервировано для SCL	выдаем изначально без подтяжки
;; * PB6 зарезервировано для MISO	читаем без подтяжки
;; * PB7 зарезервировано для CE		выдаем изначально с подтяжкой
;; * 
;; * Чтение данных из АЦП MAX6675:
;; * Опускаем CE в 0, выдаем клоки на SCL 16 бит и в когда SCL = 1 читаем биты с вывода MISO.
;; * Байты идут старшим байтом и старшим битом вперед
;; * В конце CE поднимаем  1, SCL должен остаться в 0.
;; * 
;; * 0 бит - 3-е состояние - не учитыаем
;; * 1 бит - всегда 0 - признак MAX6675
;; * 2 бит 0 если все хорошо, 1 если термопара в обрыве
;; * 3-14 биты (12 штук) значение температуры, 2 младших разряда - дробная часть (х0,25)
;; * 	все нули = 0 гр. по цельсию
;; * 	все единицы - +1023,75
;; * 15 бит - знак температуры = всегда 0.
;; * 
				;; здесь перепутаны местами SCL и CE !!!!!!!!
				
				CBI PORTB,5		;; опустим линию SCL (хотя должен быть и так 0 , ну на всякий случай :))
				CBI PORTB,7		;; опустим линию CE
				LDI r18,8
				CLR r17
				;; принимаем старшие биты 15-8
	rtom_01:	SBI PORTB,5		;; SCL
				CLC				;; очистить флаг переноса С
				NOP
				NOP
				SBIC PINB,6		;; MISO
				SEC				;; установить флаг переноса С
				CBI PORTB,5		;; SCL
				ROL r17			;; сдвиг влево через С
				DEC r18
				BRNE rtom_01
				;; принимаем младшие биты 7-0
				LDI r18,8
				CLR r16
	rtom_02:	SBI PORTB,5		;; SCL
				CLC				;; очистить флаг переноса С
				NOP
				NOP
				SBIC PINB,6		;; MISO
				SEC				;; установить флаг переноса С
				CBI PORTB,5		;; SCL
				ROL r16			;; сдвиг влево через С
				DEC r18
				BRNE rtom_02
				SBI PORTB,7		;; поднимем линию CE
				
				LdiX diskrets_acp
				ST x+,r17
				ST x,r16
				
				SetBit STATUS,2
				ClrBit STATUS,1		;; сброс флага статуса
				;; CBI PORTA,1
RET ;}
CalculationACP: ;{	;; 
				LdiX diskrets_acp
				LD r16,x+		;; старший байт
				LD r17,x		;; младший байт
				
				;; проверим обязательные биты с 0-ми
				SBRC r17,1
				RJMP cacp_err
				SBRC r17,2
				RJMP cacp_err
				SBRC r16,7
				RJMP cacp_err
				;; если здесь значит всё нормально
				LDI r18,5		;; обрезаем сразу и дробную часть
	cacp_01:
				CLC
				ROR r16
				ROR r17
				DEC r18
				BRNE cacp_01
				
				RCALL DIGITS16		;; (вход: r16-r17 аргумент от H к L; выход:	r16-r20 цифры от H к L)
				TST r16
				BRNE cacp_H1
				TST r17
				BREQ cacp_02
	cacp_H1:	;;число больше 999
				LdiX bf_num
				LDI r16,15		;; H
				ST x+,r16
				ST x+,r16
				ST x,r16
				RJMP cacp_exit
	cacp_err:	;; ошибка банных или обрыв датчика
				LdiX bf_num
				LDI r16,16		;; -
				ST x+,r16
				ST x+,r16
				ST x,r16
				RJMP cacp_exit
	cacp_02:	;;число не более трех разрядов
				LdiX bf_num
				ST x+,r18
				ST x+,r19
				ST x,r20
	cacp_exit:
				ClrBit STATUS,2		;; сброс флага статуса
RET ;}
TickProcess: ;{	;; 
				;;проверим надо ли инкрементировать счетчик антидребезга и проверять его
				SBRS BUTTON,7
				RJMP tkpr_0
				LdiX shake_cnt
				LD r25,x+
				LD r24,x
				ADIW r24,1
				;;проверим на максимум (0x1000)
				CPI r25,0x10
				BRLO tkpr_01
				;; CPI r24,0xFF
				;; BRNE tkpr_01
				CLR BUTTON	;; stop счетчика антидребезга+сброс нажатий и отработок кнопок
				RJMP tkpr_exit
	tkpr_01:	
				;; если нет сработки на длинное нажатие - проверим счетчик
				SBRC BUTTON,6
				RJMP tkpr_end
				;; проверим на длинное нажатие
				CPI r25,4
				BRLO tkpr_02			;; если меньше
				;; длинное нажатие
				SetBit BUTTON,6
				RJMP tkpr_end
				
	tkpr_02:	;; если нет сработки на короткое нажатие - проверим счетчик
				SBRC BUTTON,4
				RJMP tkpr_end
				TST r25
				BRNE tkpr_03
				CPI r24,20
				brge tkpr_03			;; если больше или равно
				RJMP tkpr_end
				
	tkpr_03:	;; короткое нажатие
				SetBit BUTTON,4
	tkpr_end:	
				LdiX shake_cnt
				ST x+,r25
				ST x,r24
				
	tkpr_0:		;; вывод индикации
				LdiX lcd_blink
				LD r16,x
				INC r16
				ST x,r16
				CPI r16,0		;;BLINK_CNT
				BRNE tkpr_bl
				SetBit STATUS,1		;; пришло время считать температуру
				;; ST x,r10
				;;инверсия бита LCD,3
				LDI r16,0b00001000
				EOR LCD,r16
				
	tkpr_bl:	
				;;выключаем все разряды
				;; CBI PORTA,0		;;старший
				;; CBI PORTB,1		;;средний
				;; CBI PORTB,0		;;младший
				LdiX dig_out
				LD r17,x
				LdiX bf_num
				
				OUT PORTD,r10	;; очистим дисплей
				CPI r17,0
				BRNE tkpr_1
				;;включаем старший разряд, выключаем предыдущий
				SBRS LCD,2
				RJMP tkpr_10
				SBRC LCD,3
	tkpr_10:
				SBI PORTA,0
				CBI PORTB,0
	tkpr_1:	
				CPI r17,1
				BRNE tkpr_2
				;;включаем средний разряд, выключаем предыдущий
				SBRS LCD,1
				RJMP tkpr_20
				SBRC LCD,3
	tkpr_20:
				SBI PORTB,1
				CBI PORTA,0
	tkpr_2:	
				CPI r17,2
				BRNE tkpr_3
				;;включаем младший разряд, выключаем предыдущий
				SBRS LCD,0
				RJMP tkpr_30
				SBRC LCD,3
	tkpr_30:
				SBI PORTB,0
				CBI PORTB,1
	tkpr_3:	
				AdrX r17
				LD r16,x	;;загрузим число которое надо вывести
				LdiFZ num_symbol
				AdrZ r16
				LPM r16,z	;;загрузим символьное его предсталение
				OUT PORTD,r16	;;выведем на дисплей
				
				LdiX dig_out
				INC r17
				CPI r17,3
				BRNE tkpr_4
				CLR r17			;;перебор - обнулим
	tkpr_4:	
				ST x,r17		;;сохраним
	tkpr_exit:
				ClrBit STATUS,0		;; сброс флага статуса
RET ;}
;;=========================================================================================================
Button_short: ;{	;; 

				SBRS BUTTON,0
				RJMP btn_sh01
				;; короткое нажатие "М"
				;; SetBit STATUS,1		;; пришло время считать температуру
				;; LdiX bf_num
				;; LDI r16,1
				;; ST x,r16
				
	btn_sh01:
				SBRS BUTTON,1
				RJMP btn_sh02
				;; короткое нажатие "+"
				;; ClrBit LCD,3
				;; LdiX set_value
				;; LD r16,x+
				;; LD r17,x
				;; CLR r18
				;; LDI r19,1
				;; RCALL ADD16X16		;;вход: r16-r17 первый аргумент от H к L, r18-r19 второй аргумент от H к L; выход:	r16-r17 результат от H к L
				;; LdiX set_value
				;; ST x+,r16
				;; ST x,r17

				;; LdiX bf_num
				;; LDI r17,1
				;; AdrX r17
				;; LDI r16,1
				;; ST x,r16
	
	btn_sh02:
				SBRS BUTTON,2
				RJMP btn_sh_exit
				;; короткое нажатие "-"
				;; SetBit LCD,3
				;; LdiX set_value
				;; LD r16,x+
				;; LD r17,x
				;; CLR r18
				;; LDI r19,1
				;; RCALL SUB16X16		;;вход: r16-r17 первый аргумент от H к L, r18-r19 второй аргумент от H к L; выход:	r16-r17 результат от H к L
				;; LdiX set_value
				;; ST x+,r16
				;; ST x,r17
				;; LdiX bf_num
				;; LDI r17,2
				;; AdrX r17
				;; LDI r16,1
				;; ST x,r16
				
	btn_sh_exit:
				SetBit BUTTON,3			;; установим флаг отработки
RET ;}
Button_long: ;{	;; 
				SBRS BUTTON,0
				RJMP btn_lg01
				;; длинное нажатие "М"
				;; SetBit LCD,2
				;; LdiX bf_num
				;; LDI r16,2
				;; ST x,r16
				
	btn_lg01:
				SBRS BUTTON,1
				RJMP btn_lg02
				;; длинное нажатие "+"
				;; SetBit LCD,1
				;; LdiX bf_num
				;; LDI r17,1
				;; AdrX r17
				;; LDI r16,2
				;; ST x,r16
	
	btn_lg02:
				SBRS BUTTON,2
				RJMP btn_lg_exit
				;; длинное нажатие "-"
				;; SetBit LCD,0
				;; LdiX bf_num
				;; LDI r17,2
				;; AdrX r17
				;; LDI r16,2
				;; ST x,r16
				
	btn_lg_exit:
				SetBit BUTTON,5			;; установим флаг отработки
RET ;}
;;=========================================================================================================
;; test1: ;{	;; "M"
				
				;; LdiX set_value
				;; LD r16,x+
				;; LD r17,x
				
				;; RCALL DIGITS16		;; (вход: r16-r17 аргумент от H к L; выход:	r16-r20 цифры от H к L)

				;; LdiX bf_num
				;; ST x+,r18
				;; ST x+,r19
				;; ST x+,r20
				
				
				
				;; ;; LDI r18,5		;; обрезаем сразу и дробную часть
	;; ;; tst_01:
				;; ;; CLC
				;; ;; ROL r17
				;; ;; ROL r16
				;; ;; DEC r18
				;; ;; BRNE tst_01
				
				;; ;; LdiX diskrets_acp
				;; ;; ST x+,r16		;; старший байт
				;; ;; ST x,r17		;; младший байт
				
				;; SetBit STATUS,2
				;; ClrBit STATUS,1		;; сброс флага статуса
;; RET ;}
;; test2: ;{	;; "+"
				;; LdiX bf_num
				;; LDI r16,4
				;; ST x+,r16
				;; INC r16
				;; ST x+,r16
				;; INC r16
				;; ST x+,r16
;; ;; LdiFZ num_symbol
;; ;; LDI r16,8

;; ;; AdrZ r16
;; ;; LPM r16,z

;; ;; OUT PORTD,r16
;; ;; SBI PORTB,1
;; ;; RET
				;; ;; PUSH r16
				
				;; ;; LdiFZ num_symbol
				;; ;; LDI r16,4

				;; ;; AdrZ r16
				;; ;; LPM r16,z
				
				;; ;; OUT PORTD,r16
				;; ;; ClrBit BUTTON,1
				
				;; ;; POP r16
;; RET ;}
;; test3: ;{	;; "-"
				;; LdiX bf_num
				;; LDI r16,7
				;; ST x+,r16
				;; INC r16
				;; ST x+,r16
				;; INC r16
				;; ST x+,r16
;; ;; LdiFZ num_symbol
;; ;; LDI r16,9

;; ;; AdrZ r16
;; ;; LPM r16,z

;; ;; OUT PORTD,r16
;; ;; SBI PORTA,0
;; ;; RET
				;; ;; PUSH r16
				
				;; ;; LdiFZ num_symbol
				;; ;; LDI r16,0

				;; ;; AdrZ r16
				;; ;; LPM r16,z
				
				;; ;; OUT PORTD,r16
				;; ;; ClrBit BUTTON,2
				
				;; ;; POP r16
;; RET ;}
;;                  0(0) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) пусто E   r(12)b(13)t(14)H(15)-(16)
num_symbol:		.DB 0x6F,0x28,0x75,0x3D,0x3A,0x1F,0x5F,0x29,0x7F,0x3F,0x00,0x57,0x50,0x5E,0x56,0x7A,0x10,0x00
Interrupt_OverFlow_80: ;{	;;
				CLI
				pushSREGr16
				
				SetBit STATUS,0

				popSREGr16
				SEI
RETI ;}
;; Interrupt_OverFlow_161: ;{	;;


;; RETI ;}
Interrupt_PCINT: ;{	;; прерывание по кнопкам PB2 - PB4
				SBRC STATUS,7		;; пропустить если нет ошибки кнопок
				RETI
				
				CLI
				pushSREGr16
				PUSH r17
				PUSH r18
				
				IN r16,PINB
				;; проверим на множественное нажатие
				LDI r18,3
				CLR r17
	i_btn_m0:			
				SBRS r16,2
				INC r17				;; счетчик установленных бит
				LSR r16
				DEC r18
				BRNE i_btn_m0
				
				CBR r17,0b00000001
				TST r17
				BREQ i_btn_00
				;; ОШИБКА: нажатие более одной кнопки одновременно
				CLR BUTTON	;; stop счетчика антидребезга+сброс нажатий и отработок кнопок
				RJMP i_btn_exit

	i_btn_00:	;; всё хорошо
				IN r16,PINB

				;; "М"
				SBRC r16,4
				RJMP i_btn01
				;; 0 - текущее состояние - нажата
				SBRC BUTTON,0
				RJMP i_btn10
				RCALL Button_start
				SetBit BUTTON,0
				RJMP i_btn_exit
				
	i_btn01:	;; 1 - текущее состояние - отпущена
				SBRS BUTTON,0
				RJMP i_btn10
				CLR BUTTON	;; stop счетчика антидребезга+сброс нажатий и отработок кнопок
				RJMP i_btn_exit
				
	i_btn10: 	;; "+"
				SBRC r16,3
				RJMP i_btn11
				;; 0 - текущее состояние - нажата
				SBRC BUTTON,1
				RJMP i_btn20
				RCALL Button_start
				SetBit BUTTON,1
				RJMP i_btn_exit
				
	i_btn11:	;; 1 - текущее состояние - отпущена
				SBRS BUTTON,1
				RJMP i_btn20
				CLR BUTTON	;; stop счетчика антидребезга+сброс нажатий и отработок кнопок
				RJMP i_btn_exit
				
	i_btn20:	 ;; "-"
				SBRC r16,2
				RJMP i_btn21
				;; 0 - текущее состояние - нажата
				SBRC BUTTON,2
				RJMP i_btn_exit
				RCALL Button_start
				SetBit BUTTON,2
				RJMP i_btn_exit
				
	i_btn21:	;; 1 - текущее состояние - отпущена
				SBRS BUTTON,2
				RJMP i_btn_exit
				CLR BUTTON	;; stop счетчика антидребезга+сброс нажатий и отработок кнопок
				
	i_btn_exit:			
				POP r18
				POP r17
				popSREGr16
				SEI
RETI ;}
Button_start: ;{	;;
				LdiX shake_cnt
				ST x+,r10
				ST x,r10
				SetBit BUTTON,7			;; запуск счетчика антидребезга	
RET ;}
;;=========================================================================================================
 ;{	;; MATH
;; сложение 16-разрядных чисел
;; вход: 	r16-r17 первый аргумент от H к L
;; 		r18-r19 второй аргумент от H к L
;; выход:	r16-r17 результат от H к L
ADD16X16:
    ADD		r17, r19
    ADC		r16, r18
RET
;; =======================================================================
;; вычитание 16-разрядных чисел
;; вход: 	r16-r17 первый аргумент от H к L
;; 		r18-r19 второй аргумент от H к L
;; выход:	r16-r17 результат от H к L
SUB16X16:
    SUB		r17, r19
    SBC		r16, r18
RET
;; =======================================================================
;; сравнение 16-разрядных чисел
;; вход: 	r16-r17 первый аргумент от H к L
;; 		r18-r19 второй аргумент от H к L
;; выход:	смотри флаги
CP16X16:
    CP		r17, r19
    CPC		r16, r18
RET
;; =======================================================================
;; вычисление цифр 16-разрядного числа
;; вход: 	r16-r17 аргумент от H к L
;; выход:	r16-r20 цифры от H к L
DIGITS16:
				CLR		R26
				CLR		R27
				CLR		R28
				CLR		R29
				CLR		R30
				LDI		r18, HIGH(10000)
				LDI		r19, LOW(10000)
	DIG16_1:
				RCALL	CP16X16	
				BRLO	DIG16_2
				RCALL	SUB16X16
				;; десятки тысяч
				INC		R26	
				RJMP	DIG16_1
	DIG16_2:	
				LDI		r18, HIGH(1000)
				LDI		r19, LOW(1000)
	DIG16_3:
				RCALL	CP16X16	
				BRLO	DIG16_4
				RCALL	SUB16X16
				;; тысячи
				INC		R27		
				RJMP	DIG16_3
	DIG16_4:
				LDI		r18, HIGH(100)
				LDI		r19, LOW(100)
	DIG16_5:
				RCALL	CP16X16	
				BRLO	DIG16_6
				RCALL	SUB16X16
				;; сотни
				INC		R28	
				RJMP	DIG16_5
	DIG16_6:
				LDI		r18, HIGH(10)
				LDI		r19, LOW(10)
	DIG16_7:
				RCALL	CP16X16	
				BRLO	DIG16_8
				RCALL	SUB16X16
				;; десятки
				INC		R29
				RJMP	DIG16_7
	DIG16_8:
				;; в r16-r17 остались только единицы
				MOV		r20, r17
				MOV		r16, R26		
				MOV		r17, R27
				MOV		r18, R28
				MOV		r19, R29
RET
;}
;;=========================================================================================================
;; .INCLUDE "main_cont1.avr"
.INCLUDE "delay16.avr"
;; .INCLUDE "..\..\_AVR_ASSEMBLER\math.avr"
;;=========================================================================================================



























