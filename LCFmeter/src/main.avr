;{ ;; ************************************************************************************* 
;; * Прошивка для контроллера ATMega32 - измеритель LCF
;; * 
;; * Таймер 1(16бит) используем для счета импульсов входящей частоты
;; * Таймер 0(8бит) [1С] совместно с регистром CNTOVF_T0 используем для задержки 1 сек
;; * 
;; * 
;; * 
;; * 
;; *************************************************************************************
;}
;; *************************************************************************************
.include "macros.avr"
.include "..\..\_AVR_ASSEMBLER\DEFs\m32def.inc"
.equ 	t1			=$60
.equ 	t2			=$61
.equ 	t3			=$62

;;=========================================================================================================
;; .eseg	;; EEPROM энергоНЕзависимая память 1024 байт
;; .org 0x000	;; EEPROM прошивать ненадо, эти номера контроллер запишет сам при настройке
;; ;; значения частот и шага записаны с младшего байта к старшему
;; eFstart:	.db 0x98,0x3A,0x00	;; стартовая частота 15000 (1500.0 кГц)
;; .org 0x003
;; eFstop:		.db 0xDF,0x93,0x04	;; конечная частота 299999 (29999.9 кГц)
;; .org 0x006
;; eFstep:		.db 0x64,0x00,0x00	;; шаг перестройки 100 (10.0 кГц)
;; .org 0x009
;; e:	.db 0x98,0x3A,0x00	;; 

;;=========================================================================================================
.dseg ;{	;сектор ОЗУ 2048 байт
.org 0x063
;; buf_RX:		.byte 257	;; буфер принятых байтов, первый байт - кол-во принятых байтов
buf_TX:		.byte 33	;; буфер передаваемых байтов, первый байт - кол-во отправляемых байтов
i24Tmp1:	.byte 3		;; 24 битная переменная 
;; CurFreq:	.byte 3		;; текущая частота
;}
;;=========================================================================================================
.def STATUS	= r9 ;{		;; регистр состояния
	;; STATUS: 7бит - 0 = свободное состояние таймера 1С => сигнал для его запуска
	;; 				- 1 = запущен таймер 1С,считаем входящие импульсы, либо пока просто занят из-за расчета результатов
	;; STATUS: 6бит - 1= таймер 1С отработал, надо обработать результат
	;; STATUS: 5бит - 1= 
	;; STATUS: 4бит - 1= 
	;; STATUS: 3бит - 1= 
	;; STATUS: 2бит - 1= 
	;; STATUS: 1бит - 1= 
	;; STATUS: 0бит - 1= резерв
;}
.def CNTOVF_T0	= r8		;; регистр-счетчик переполнений счетчика-таймера 0
.def CNTOVF_T1	= r7		;; регистр-счетчик переполнений счетчика-таймера 1
;;=========================================================================================================
.cseg ;{	;; Таблица прерываний 
.org 0x0000		rjmp start
.org INT0addr	reti		;;	= 0x0002	;; External Interrupt Request 0
.org INT1addr	reti		;;	= 0x0004	;; External Interrupt Request 1
.org INT2addr	reti		;;	= 0x0006	;; External Interrupt Request 2
.org OC2addr	reti		;;	= 0x0008	;; Timer/Counter2 Compare Match
.org OVF2addr	reti		;;	= 0x000a	;; Timer/Counter2 Overflow
.org ICP1addr	reti		;;	= 0x000c	;; Timer/Counter1 Capture Event
.org OC1Aaddr	reti		;;	= 0x000e	;; Timer/Counter1 Compare Match A
.org OC1Baddr	reti		;;	= 0x0010	;; Timer/Counter1 Compare Match B
.org OVF1addr	rjmp Interrupt_OverFlow_161	;;	= 0x0012	;; Timer/Counter1 Overflow
.org OC0addr	reti		;;	= 0x0014	;; Timer/Counter0 Compare Match
.org OVF0addr	rjmp Interrupt_OverFlow_80	;;	= 0x0016	;; Timer/Counter0 Overflow
.org SPIaddr	reti		;;	= 0x0018	;; Serial Transfer Complete
.org URXCaddr	reti		;;	rjmp Interrupt_USART_RX_Complete	;;	= 0x001a	;; USART, Rx Complete
.org UDREaddr	reti		;;	= 0x001c	;; USART Data Register Empty
.org UTXCaddr	reti		;;	= 0x001e	;; USART, Tx Complete
.org ADCCaddr	reti		;;	= 0x0020	;; ADC Conversion Complete
.org ERDYaddr	reti		;;	= 0x0022	;; EEPROM Ready
.org ACIaddr	reti		;;	= 0x0024	;; Analog Comparator
.org TWIaddr	reti		;;	= 0x0026	;; 2-wire Serial Interface
.org SPMRaddr	reti		;;	= 0x0028	;; Store Program Memory Ready
;}	
;;=========================================================================================================
 ;{		;; Фьюзы
 ;; для F = 16 МГц (внешний кварц)
;; Фьюзы: для USBASP 1 => установленный бит => галки нет
;;					0 => сброшенный бит => отмечено галкой
;; все биты LOCK установлены
;;---- Fuse High Byte ----
;; OCDEN - 1
;; JTAGEN - 1
;; SPIEN - 0 недоступен
;; CKOPT - 0
;; EESAVE - 1
;; BOOTSZ1 - 0
;; BOOTSZ0 - 0
;; BOOTRST - 1
;;---- Fuse Low Byte ----
;; BODLEVEL - 1
;; BODEN - 1
;; SUT1 - 1
;; SUT0 - 1
;; CKSEL3 - 1
;; CKSEL2 - 1
;; CKSEL1 - 1
;; CKSEL0 - 1
;}
;;=========================================================================================================
.org 0x030	;; для ATMEGA32 INT_VECTORS_SIZE	= 42 = 0x02A - размер поля для векторов прерывания
start: ;{
	ldi r16,low(RAMEND)
	out spl,r16
	ldi r16,high(RAMEND)
	out sph,r16

	clr r10					;; R10 - 00000000
	ser r16
	mov r11,r16				;; R11 - 11111111
;;=========================================================================================================
;; Настройка портов 
;; Порт A
	;; out DDRA,r11			;; все выводы работают как выход
	;; ;; ldi r16,0b10001110
	;; ;; out PORTA,r16
	;; out PORTA,r11

;; Порт B
	;; out DDRB,r11
	;; ldi r16,0b00000111
	;; out PORTB,r16

;; Порт C
	;; out DDRC,r11			;; все выводы работают как выход
	;; out PORTC,r10			;; без подтягивающих резисторов т.е. 0

;;  Порт D
;; PD0 (выв.14) RXD в МК
;; PD1 (выв.15) TXD из МК
;; PD2 (выв.16) INT0 
;; PD3 (выв.17) INT1 DSR в МК
;; PD4 (выв.18) DTR из МК
;; PD5 (выв.19) debug TXD из МК
;; PD6 (выв.20) выход на контрольный светодиод RED
;; PD7 (выв.21) выход на контрольный светодиод GREEN
	ldi r16,0b11110000
	out DDRD,r16
	ldi r16,0b00110000
	out PORTD,r16

;;=========================================================================================================
;; Настройка UART на 38400 bps(бод)
	out UBRRH,r10	;; предделитель старший разряд
	ldi r16,25		;; UBRR = 8000000/(16 * 38400) - 1 = 25,04 //при U2X = 0
	out UBRRL,r16	;; предделитель младший разряд
	ldi r16,(1 << TXEN)	;; вкл приемник(RXEN=1),вкл передатчик(TXEN=1),вкл прерывание по приему(RXCIE=1)
	out UCSRB,r16
	;; Для доступа к регистру UCSRC ОБЯЗАТЕЛЬНО выставить бит URSEL!!!
	ldi r16,(1 << URSEL)|(3 << UCSZ0)	;; асинхронный режим(UMSEL=0), 8 бит(UCSZ2-0=011), 1 стоп-бит(USBS=0),без контроля четности(UPM1-0=00)
	out UCSRC,r16
;;=========================================================================================================
	;; ldi r16,0b00000110		;; установка прерываний по заднему фронту INT0
	;; out MCUCR,r16			;; или 0b00000110 по заднему фронту INT0 и любому изменению по INT1
	;; ldi r16,0b11000000		;; установка прерываний по INT0
	;; out GICR,r16			;; или 0b11000000 по заднему фронту INT0 и INT1

	ldi r16,(1 << TOIE0)|(1 << TOIE1)		;; TOIE0 разрешить прерывание по переполнению 0(8разр) счетчика
	out TIMSK,r16				;; TOIE2 разрешить прерывание по переполнению 2(8разр) счетчика
;;=========================================================================================================
;; инициализация буферов и переменных
	;; LdiX(buf_RX)
	;; st x,r10	 			;; обнулим счетчик принятых байтов (первый байт буфера)
	;; clr MODE				;; очистим регистр режимов работы
	;; clr ERROR				;; очистим регистр ошибок
	clr STATUS				;; очистим регистр состояния
;;=========================================================================================================
	sbi PORTD,7 ;; GREEN	;; обмен с компьютером
	sbi PORTD,6 ;; RED	;; обмен с РС
	rcall d_500ms
	cbi PORTD,6 ;; RED
	cbi PORTD,7 ;; GREEN
;;=========================================================================================================
	;; rcall CheckEEpromValues

;; ldi r16,'S'
;; rcall Send_Byte_USART
;; ldi r16,'T'
;; rcall Debug_Send_Byte
;; ldi r16,'A'
;; rcall Debug_Send_Byte
;; ldi r16,'R'
;; rcall Debug_Send_Byte
;; ldi r16,'T'
;; rcall Debug_Send_Byte

;; rcall d_500ms
;; rcall d_200ms
;; sbi PORTD,7 ;GREEN
;; cbi PORTD,7 ;GREEN
;; sbi PORTD,6 ;RED
;; cbi PORTD,6 ;RED
;; cbi PORTD,6 ;RED 2такта
;; cbi PORTD,7 ;GREEN 2такта
	;; ClrBit MODE,7	;; (7 бит)режим обмена с Р-168-5КН1
	;; sbic UCSRA,RXC
	;; in r16,UDR
	sei
;}
;;=========================================================================================================
loop: ;{
;; rcall SendERROR_PC	;;Посылка по RS232 "ERROR" (hex: 45 52 52 4F 52)

	;; rjmp 
	;; sbi PORTD,6 	;RED 2такта
			;; rcall d_1sec
			;;  ldi r16,0x55
			;;  rcall Send_Byte_USART
					
		
				 sbrs STATUS,7		;; пропустить если ненадо запускать таймер 1С
				 rcall Run_1C_and_T1
		
				 sbrc STATUS,6		;; пропустить если ненадо обработать результат
				 rcall Calculate


rjmp loop ;}
;;=========================================================================================================
Run_1C_and_T1: ;{	;; Запуск счетчика 1C и T1
				;; подготавливаем счетчик 1C
				clr CNTOVF_T0		;; установим счетчик переполнений на начальное значение
				out TCNT0,r10		;; обнулим счетчик
				ldi r20,0b00000101	;; (такт = 0.0625мкс) * 1024 * 256 = 16.384 мс
				SetBit STATUS,7		;;таймер 1С запущен

				;; подготавливаем счетчик T1
				clr CNTOVF_T1		;; обнулим счетчик переполнений
				out TCNT1H,r10
				out TCNT1L,r10
				ldi r19,0b00000110		;; внешний клок с Т1 (падающий фронт) (...111 - растущий фронт)

				out TCCR1B,r19		;; пуск счетчик T1
				out TCCR0,r20		;; пуск счетчик 1C
ret ;}
Calculate: ;{	;; обработка результата подсчета импульсов входящей частоты
				;; sbi PORTD,7 ;GREEN
				;; sbi PORTD,6 ;RED
				;; rcall d_200ms
				;; cbi PORTD,7 ;GREEN
				;; cbi PORTD,6 ;RED
				
				in r16,TCNT1L
				rcall Send_Byte_USART
				in r16,TCNT1H
				rcall Send_Byte_USART
				mov r16,CNTOVF_T1
				rcall Send_Byte_USART
				
				ClrBit STATUS,7
				ClrBit STATUS,6

ret ;}
Interrupt_OverFlow_80: ;{	;; переполнение счетчика 1C
;; переполнение происходит каждые 16.384 мс
;; 1с / 0,016384 = 61,035... 
;; CNTOVF_T0 будем убавлять до 0
				cli
				push r16
				in r16,SREG
				push r16
				
				inc CNTOVF_T0
				mov r16,CNTOVF_T0
				cpi r16,62
				breq intovf80_01
				cpi r16,61
				brne intovf80_exit
				;; последний доводочный цикл
				ldi r16,247
				out TCNT0,r16
				rjmp intovf80_exit
	intovf80_01:;; досчитали до 1сек
				out TCCR0,r10			;; стоп счетчик 1C
				out TCCR1B,r10			;; стоп счетчик T1
				SetBit STATUS,6			;;таймер 1С отработал, надо обработать результат
	intovf80_exit:
				pop r16
				out SREG,r16
				pop r16
				sei
reti ;}
Interrupt_OverFlow_161: ;{	;; переполнение счетчика T1
				cli
				push r16
				in r16,SREG
				push r16

				inc CNTOVF_T1

				pop r16
				out SREG,r16
				pop r16
				sei
reti ;}
;;=========================================================================================================
.include "main_cont1.avr"
.include "delay16.avr"
;;=========================================================================================================






























