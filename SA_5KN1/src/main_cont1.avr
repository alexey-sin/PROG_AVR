CheckEEpromValues: ;{	;; Проверка корректности частот в EEPROM
;; проверим стартовую частоту
				LdiY(eeFstart)
				LdiX(i24Tmp1)
				rcall Read3_eeY_X		;; указатели восстанавливаются
				clt						;; Очистим T
				
				LdiZ(constFreqMin * 2)	;; проверка на минимум
				LdiY(i24Tmp1)
				rcall Compare3_Zm_Y		;; флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
				breq cheeval01			;; Z = 1 т.е. Z = Y
				brlo cheeval01			;; C = 1 т.е. Z < Y
				set						;; ОШИБКА! Установим T
	cheeval01:	
				LdiZ(constFreqMax * 2)	;; проверка на максимум
				LdiY(i24Tmp1)
				rcall Compare3_Zm_Y		;; флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
				brsh cheeval02			;; C = 0 т.е. Z >= Y
				set						;; ОШИБКА! Установим T
	cheeval02:	
				brtc cheeval03			;; переходим если Т сброшен: ошибок нет
				;; запишем минимальную частоту как стартовую
				sbi PORTD,6 ;; RED
				LdiZ(constFreqMin * 2)
				LdiX(i24Tmp1)
				rcall Copy3_Zm_X		;; указатели восстанавливаются
				LdiY(eeFstart)
				rcall Write3_X_eeY		;; указатели восстанавливаются
				cbi PORTD,6 ;; RED
	cheeval03:
;; проверим конечную частоту
				LdiY(eeFstop)
				LdiX(i24Tmp1)
				rcall Read3_eeY_X		;; указатели восстанавливаются
				clt						;; Очистим T
				
				LdiZ(constFreqMin * 2)	;; проверка на минимум
				LdiY(i24Tmp1)
				rcall Compare3_Zm_Y		;; флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
				breq cheeval04			;; Z = 1 т.е. Z = Y
				brlo cheeval04			;; C = 1 т.е. Z < Y
				set						;; ОШИБКА! Установим T
	cheeval04:	
				LdiZ(constFreqMax * 2)	;; проверка на максимум
				LdiY(i24Tmp1)
				rcall Compare3_Zm_Y		;; флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
				brsh cheeval05			;; C = 0 т.е. Z >= Y
				set						;; ОШИБКА! Установим T
	cheeval05:	
				brtc cheeval06			;; переходим если Т сброшен: ошибок нет
				;; запишем минимальную частоту как стартовую
				sbi PORTD,6 ;; RED
				LdiZ(constFreqMax * 2)
				LdiX(i24Tmp1)
				rcall Copy3_Zm_X		;; указатели восстанавливаются
				LdiY(eeFstop)
				rcall Write3_X_eeY		;; указатели восстанавливаются
				cbi PORTD,6 ;; RED
	cheeval06:
;; проверим шаг перестройки частоты
				LdiY(eeFstep)
				LdiX(i24Tmp1)
				rcall Read3_eeY_X		;; указатели восстанавливаются
				clt						;; Очистим T
				
				LdiZ(constStepMin * 2)	;; проверка на минимум
				LdiY(i24Tmp1)
				rcall Compare3_Zm_Y		;; флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
				breq cheeval07			;; Z = 1 т.е. Z = Y
				brlo cheeval07			;; C = 1 т.е. Z < Y
				set						;; ОШИБКА! Установим T
	cheeval07:	
				LdiZ(constStepMax * 2)	;; проверка на максимум
				LdiY(i24Tmp1)
				rcall Compare3_Zm_Y		;; флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
				brsh cheeval08			;; C = 0 т.е. Z >= Y
				set						;; ОШИБКА! Установим T
	cheeval08:	
				brtc cheeval09			;; переходим если Т сброшен: ошибок нет
				;; запишем минимальную частоту как стартовую
				sbi PORTD,6 ;; RED
				LdiZ(constStepMin * 2)
				LdiX(i24Tmp1)
				rcall Copy3_Zm_X		;; указатели восстанавливаются
				LdiY(eeFstep)
				rcall Write3_X_eeY		;; указатели восстанавливаются
				cbi PORTD,6 ;; RED
	cheeval09:
;; проверим отладочные регистры (последний)
				LdiY(eDEBUG_INFO + 7)
				rcall Load_eY_r18
				ldi r16,$EE
				cp r18,r16
				breq cheeval10
				mov r18,r16
				rcall Save_r18_eY
	cheeval10:
ret ;}
SendTX: ;{				;; отправка содержимого буфера buf_TX по RS232. buf_TX[0] - кол-во отправляемых байтов
				pushZ
				push r16
				push r17
				
				LdiZ(buf_TX)
				ld r17,z+
	sndtx01:	
				ld r16,z+
				rcall Send_Byte_USART
				dec r17
				brne sndtx01

				LdiZ(buf_TX)
				st z,r10
				
				pop r17
				pop r16
				popZ
ret ;}
SetCheckSummTX: ;{		;; формирование в буфере buf_TX последнего байта контрольной суммы
				pushZ
				push r16
				push r17
				push r18
				push r19
				
				clr r17				;; регистр счетчик контрольной суммы
				LdiZ(buf_TX)
				ld r18,z+			;; загрузим начальный объем сообщения
				mov r19,r18			;; сохраним копию
	scstx01:
				ld r16,z+
				add r17,r16			;; по байтно складываем всё
				dec r18
				brne scstx01
				
				st z,r17			;; в конец посылки добавляем КС
				inc r19
				LdiZ(buf_TX)
				st z,r19			;; и корректируем кол-во байтов
				
				pop r19
				pop r18
				pop r17
				pop r16
				popZ
ret ;}
AnswerPING_PC: ;{		;; посылка ответа на пинг
				pushZ
				push r16
				
				LdiZ(buf_TX)
				ldi r16,3
				st z+,r16
				ldi r16,0x55
				st z+,r16
				st z+,r16
				st z+,r16
				rcall SetCheckSummTX
				rcall SendTX
				
				pop r16
				popZ
ret ;}
SendOK_PC: ;{			;;Посылка по RS232 "ОК" (hex: 4F 4B XX)
				pushZ
				push r16
				
				LdiZ(buf_TX)
				ldi r16,2
				st z+,r16
				ldi r16,'O'
				st z+,r16
				ldi r16,'K'
				st z+,r16
				rcall SetCheckSummTX
				rcall SendTX
				
				pop r16
				popZ
ret ;}
SendERROR_PC: ;{		;;Посылка по RS232 "ERROR" (hex: 45 52 52 4F 52 XX)
				pushZ
				push r16
				
				LdiZ(buf_TX)
				ldi r16,5
				st z+,r16
				ldi r16,'E'
				st z+,r16
				ldi r16,'R'
				st z+,r16
				st z+,r16
				ldi r16,'O'
				st z+,r16
				ldi r16,'R'
				st z+,r16
				rcall SetCheckSummTX
				rcall SendTX
				
				pop r16
				popZ
ret ;}
SendR17eeY_FREQ_PC: ;{		;;Посылка по RS232 частоты по r17 (ответ на запрос GET)
;; r17 - 01 eeFstart; 02 eeFstop; 03 eeFstep 
				pushX
				pushY
				push r16

				LdiX(buf_TX)
				ldi r16,5
				st x+,r16
				ldi r16,$46
				st x+,r16
				st x+,r17
				LdiX(i24Tmp1)
				rcall Read3_eeY_X	;; Y установлен перед вызовом функции
				LdiY(i24Tmp1)
				LdiX(buf_TX + 3)
				ld r16,y+
				st x+,r16
				ld r16,y+
				st x+,r16
				ld r16,y+
				st x+,r16
				rcall SetCheckSummTX
				rcall SendTX

				pop r16
				popY
				popX
ret ;}
SendPackERRORS_PC: ;{		;;Посылка по RS232 пакета с ошибками последнего сканирования
;; * Команда из ПК - (hex: 47 0E 55) - выдать ошибки сканирования; 
;; * 		Ответ - (hex: CE RR RR XX) RR - число ошибок
;; * 				(hex: FE QQ QQ QQ XX) QQ - конечная частота сканирования
;; * 		и далее все ошибочные частоты в виде (hex: EF HH HH HH XX) - частота младшим байтом вперед
;; .equ eeERR_CNT		= $0009	;; счетчик ошибок.поле 3х байтное,но используется 2 байта и то только до 21758(вкл)
;; .equ eeFREQ_END		= $000C	;; частота на которой фактически закончилось предыдущее сканирование
;; .equ eeFREQS_ERR	= $0100	;; поле частот (по 3 байта на частоту) с ошибками настроек
				pushZ
				pushY
				pushX
				push r25
				push r24
				push r23
				push r22
				push r21
				push r20
				push r19
				push r18
				push r17
				push r16
				
				;; отправим число ошибок
				LdiY(eeERR_CNT)
				LdiX(i24TmpRS)
				rcall Read3_eeY_X
				LdiZ(buf_TX)
				ldi r16,3
				st z+,r16
				ldi r16,$CE
				st z+,r16
				ld r20,x+		;; r20 мл. байт числа ошибок
				st z+,r20
				ld r21,x+		;; r21 ст. байт числа ошибок
				st z+,r21
				rcall SetCheckSummTX
				rcall SendTX

				;; отправим конечную частоту сканирования
				LdiY(eeFREQ_END)
				LdiX(i24TmpRS)
				rcall Read3_eeY_X
				LdiZ(buf_TX)
				ldi r16,4
				st z+,r16
				ldi r16,$FE
				st z+,r16
				ld r16,x+
				st z+,r16
				ld r16,x+
				st z+,r16
				ld r16,x+
				st z+,r16
				rcall SetCheckSummTX
				rcall SendTX
				
				tst r21
				brne sndpck01
				tst r20
				breq sndpck03
	sndpck01:	;; отправим список частот с ошибками в настройке
				clr r22			;; r22 мл. байт счетчика ошибок (r24)
				clr r23			;; r23 ст. байт счетчика ошибок (r25)
				ldi r17,3
	sndpck02:	
				LdiY(eeFREQS_ERR)
				mul r22,r17		;;результат r1:r0
				movw r24,r0
				mul r23,r17		;;результат r1:r0
				add r25,r0
				add yl,r24
				adc yh,r25
				LdiX(i24TmpRS)
				rcall Read3_eeY_X
				LdiZ(buf_TX)
				ldi r16,4
				st z+,r16
				ldi r16,$EF
				st z+,r16
				ld r16,x+
				st z+,r16
				ld r16,x+
				st z+,r16
				ld r16,x+
				st z+,r16
				rcall SetCheckSummTX
				rcall SendTX
				ldi r16,1
				add r22,r16
				clr r16
				adc r23,r16
				cp r22,r20
				cpc r23,r21
				brcs sndpck02
	sndpck03:	
				pop r16
				pop r17
				pop r18
				pop r19
				pop r20
				pop r21
				pop r22
				pop r23
				pop r24
				pop r25
				popX
				popY
				popZ
ret ;}

Copy3_X_Y: ;{			;; переносит 3 байта с X(озу) -> Y(озу) и возвращает указатели на место
				push r16
				
				ld r16,x+		;; младший байт
				st y+,r16
				ld r16,x+		;; средний байт
				st y+,r16
				ld r16,x+		;; старший байт
				st y+,r16
				sbiw xl,3
				sbiw yl,3
				
				pop r16
ret ;}
Copy3_Y_X: ;{			;; переносит 3 байта с Y(озу) -> X(озу) и возвращает указатели на место
				push r16
				
				ld r16,y+		;; младший байт
				st x+,r16
				ld r16,y+		;; средний байт
				st x+,r16
				ld r16,y+		;; старший байт
				st x+,r16
				sbiw xl,3
				sbiw yl,3
				
				pop r16
ret ;}
Copy3_Zm_X: ;{			;; перенос из PROGMEM(Z) в ОЗУ(X) 3 байтов. На выходе указатели восстанавливаются
				push r18
				push r17

				ldi r17,3
	cp3zmx01:
				lpm r18,z+
				st x+,r18
				dec r17
				brne cp3zmx01

				sbiw xl,3
				sbiw zl,3

				pop r17
				pop r18
ret ;}

Send_Byte_USART: ;{ 	;; r16 => send 
			sbis UCSRA,UDRE
			rjmp Send_Byte_USART
			out UDR,r16
ret ;}

Compare3_Zm_Y: ;{		;; сравнивает 24бит. числа с адресами Zm(из прогр.памяти) и Y(ОЗУ).
;; На выходе флаги Z = 1 числа равны; C = 1 (Z < Y); если (Z > Y) флаги Z и C = 0.
;; указатели Y и Z восстанавливаются.
				pushZ
				pushY
				push r18
				push r17
				push r16
				
				ldi r16,4
				adiw zl,2
				adiw yl,3
	cmpxz00:
				dec r16
				breq cmpxz01
				lpm r18,z
				sbiw zl,1
				ld r17,-y
				cp r18,r17
				breq cmpxz00
	cmpxz01:
				pop r16
				pop r17
				pop r18
				popY
				popZ
ret ;}
Compare3_Y_X: ;{		;; сравнивает 24бит. числа с адресами Y(ОЗУ) и X(ОЗУ).
;; На выходе флаги Z = 1 (Y == X); C = 1 (Y < X); если (Y > X) флаги Z и C = 0.
;; указатели Y и Z восстанавливаются.
				pushZ
				pushY
				push r18
				push r17
				push r16
				
				ldi r16,4
				adiw yl,3
				adiw xl,3
	cmpyx00:
				dec r16
				breq cmpyx01
				ld r18,-y
				ld r17,-x
				cp r18,r17
				breq cmpyx00
	cmpyx01:
				pop r16
				pop r17
				pop r18
				popY
				popZ
ret ;}
.cseg ;{	;; добавляем 0 для выравнивания кратно 2м байтам
;; world_0:		.db 4,'P','I','N','G',0				;; "PING"
;; world_1:		.db 3,'S','E','T'					;; "SET"
;; world_2:		.db 3,'G','E','T'					;; "GET"
;; world_3:		.db 6,'F','S','T','A','R','T',0		;; "FSTART"
;; world_4:		.db 5,'F','S','T','O','P'			;; "FSTOP"
;; world_5:		.db 5,'F','S','T','E','P'			;; "FSTEP"
;; world_6:		.db 6,'E','R','R','O','R','S',0		;; "ERRORS"
constFreqMax:	.db $DF,$93,$04,0					;; 299999
constFreqMin:	.db $98,$3A,$00,0					;; 15000
constStepMax:	.db $47,$59,$04,0					;; 284999
constStepMin:	.db $64,$00,$00,0					;; 100
err_cnt_max:	.db $FE,$54,$00,0					;; 21758 eeERR_CNT возможно до 21758(вкл)
;; world_space:	.db 1,$20							;;одиночный пробел
;}
SendRS_PUSH1: ;{	;;о тправка команды >> 03 00 01 XX	(нажатие кнопки 1)
;; чтобы станция перешла на 1 частоту канала или если на ней - показала частоту
				pushX
				push r16
				
				LdiX(buf_TX)
				ldi r16,3
				st x+,r16
				ldi r16,$03
				st x+,r16
				ldi r16,$00
				st x+,r16
				ldi r16,$01
				st x+,r16
				rcall SetCheckSummTX
				rcall SendTX
				;; запускаем 16 битный таймер
				SetBit STATUS,4			;; ждем ответа радиостанции
				out TCNT1H,r10
				out TCNT1L,r10
				;; ldi r16,0b00000000		;; счетчик остановлен
				;; ldi r16,0b00000001		;; 0,125мкс*1*65536 = 8.192мс (переполнение счетчика)
				;; ldi r16,0b00000010		;; 0,125мкс*8*65536 = 65.536мс (переполнение счетчика)
				;; ldi r16,0b00000011		;; 0,125мкс*64*65536 = 524.288мс (переполнение счетчика)
				ldi r16,0b00000100		;; 0,125мкс*256*65536 = 2.097с (переполнение счетчика)
				;; ldi r16,0b00000101		;; 0,125мкс*1024*65536 = 8.388с (переполнение счетчика)
				out TCCR1B,r16

				pop r16
				popX
ret ;}
SendRS_ChangeFREQ: ;{	;; отправка команды >> 05 14 WW WW WW XX	(установка частоты - WW WW WW - c младшего байта)
;; чтобы станция перешла на 1 частоту канала или если на ней - показала частоту
				pushX
				push r16
				
				LdiX(buf_TX)
				ldi r16,5
				st x+,r16
				ldi r16,$05
				st x+,r16
				ldi r16,$14
				st x+,r16
				LdiY(CurFreq)
				rcall Copy3_Y_X
				rcall SetCheckSummTX
				rcall SendTX
				;; запускаем 16 битный таймер
				SetBit STATUS,4			;; ждем ответа радиостанции
				out TCNT1H,r10
				out TCNT1L,r10
				;; ldi r16,0b00000000		;; счетчик остановлен
				;; ldi r16,0b00000001		;; 0,125мкс*1*65536 = 8.192мс (переполнение счетчика)
				;; ldi r16,0b00000010		;; 0,125мкс*8*65536 = 65.536мс (переполнение счетчика)
				;; ldi r16,0b00000011		;; 0,125мкс*64*65536 = 524.288мс (переполнение счетчика)
				ldi r16,0b00000100		;; 0,125мкс*256*65536 = 2.097с (переполнение счетчика)
				;; ldi r16,0b00000101		;; 0,125мкс*1024*65536 = 8.388с (переполнение счетчика)
				out TCCR1B,r16

				pop r16
				popX
ret ;}
SendRS_TuneASU: ;{	;; отправка команды >> 02 53 XX	(команда настройки АСУ)
				pushX
				push r16
				
				LdiX(buf_TX)
				ldi r16,2
				st x+,r16
				ldi r16,$02
				st x+,r16
				ldi r16,$53
				st x+,r16
				rcall SetCheckSummTX
				rcall SendTX
				;; запускаем 16 битный таймер
				SetBit STATUS,4			;; ждем ответа радиостанции
				out TCNT1H,r10
				out TCNT1L,r10
				;; ldi r16,0b00000000		;; счетчик остановлен
				;; ldi r16,0b00000001		;; 0,125мкс*1*65536 = 8.192мс (переполнение счетчика)
				;; ldi r16,0b00000010		;; 0,125мкс*8*65536 = 65.536мс (переполнение счетчика)
				;; ldi r16,0b00000011		;; 0,125мкс*64*65536 = 524.288мс (переполнение счетчика)
				ldi r16,0b00000100		;; 0,125мкс*256*65536 = 2.097с (переполнение счетчика)
				;; ldi r16,0b00000101		;; 0,125мкс*1024*65536 = 8.388с (переполнение счетчика)
				out TCCR1B,r16

				pop r16
				popX
ret ;}

ADD_YinX16: ;{	;; сложить указатель Y и значение по адресу X; результат в Y
				pushX
				push r16
				
				ld r16,x+
				add yl,r16
				ld r16,x
				adc yh,r16
				
				pop r16
				popX
ret ;}
ADD_Y24_X24: ;{	;; сложить значения по указателям Y и X с сохранением результата в Y.указатели восстанавливаются
				pushX
				pushY
				push r16
				push r17
				
				ld r16,y
				ld r17,x+
				add r16,r17
				st y+,r16
				
				ld r16,y
				ld r17,x+
				adc r16,r17
				st y+,r16
				
				ld r16,y
				ld r17,x+
				adc r16,r17
				st y+,r16

				pop r17
				pop r16
				popY
				popX
ret ;}
INCinX24: ;{	;; инкременировать значение по адресу X. указатель X восстанавливается
				pushX
				pushY
				push r16

				ld yl,x+
				ld yh,x
				adiw yl,1
				sbiw xl,1
				st x+,yl
				st x+,yh
				st x+,r10

				pop r16
				popY
				popX
ret ;}
MULinXto3: ;{	;; умножить значение по адресу X на 3. указатель X восстанавливается
;; исходим из того, что макс. умножаемое число 21758($54FE) при этом результат будет 65274($FEFA) т.е. 2байта полюбому
				pushX
				push r16
				push r17
				push r18
				push r19
				
				ldi r17,3
				
				ld r16,x+
				mul r16,r17		;;результат r1:r0
				movw r18,r0		;; r19:r18 <- r1:r0
				ld r16,x
				mul r16,r17		;;результат r1:r0
				add r19,r0
				sbiw xl,1
				st x+,r18
				st x+,r19
				st x,r10
				
				pop r19
				pop r18
				pop r17
				pop r16
				popX
ret ;}

Debug_Send_Byte: ;{ 	;; r16 => send PB3 а ля RS232
;; для скорости 38400 длительность бита 1/38400=26,0416(6)мкс
				push r17
				push r16

				ldi r17,8			;; счетчик битов
				cbi PORTB,3
				rcall d_26mks		;; стартовый бит
dbsbt01:	
				sbrc r16,0
				sbi PORTB,3
				sbrs r16,0
				cbi PORTB,3
				ror r16
				rcall d_26mks		;; 8 битов данных
				dec r17
				brne dbsbt01

				sbi PORTB,3
				rcall d_26mks		;; стоповый бит

				pop r16
				pop r17
ret ;}
SaveDebugINFO: ;{ 	;; сохранение отладочной информации во внутренней EEPROM
;; eDEBUG_INFO:	.db 0,0,0,0,0,0,0,0	8 байт: STATUS,ERROR,ANS_RS_COM,ANS_RS_VAL,STEP_CYKL,ANS_RS_CNT,ANS_RS_SUM,'E' - записываются в случае ошибки
				pushY
				push r18
				
				LdiY(eDEBUG_INFO)
				mov r18,STATUS
				rcall Save_r18_eY
				adiw yl,1
				mov r18,ERROR
				rcall Save_r18_eY
				adiw yl,1
				mov r18,ANS_RS_COM
				rcall Save_r18_eY
				adiw yl,1
				mov r18,ANS_RS_VAL
				rcall Save_r18_eY
				adiw yl,1
				mov r18,STEP_CYKL
				rcall Save_r18_eY
				adiw yl,1
				mov r18,ANS_RS_CNT
				rcall Save_r18_eY
				adiw yl,1
				mov r18,ANS_RS_SUM
				rcall Save_r18_eY
				adiw yl,1
				ldi r18,$EE
				rcall Save_r18_eY

				pop r18
				popY
ret ;}
SendDebugINFO_USART: ;{ 	;; отправляем рабочие регистры из внутренней EEPROM по USART
				pushY
				push r18
				push r16

				LdiY(eDEBUG_INFO)
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Send_Byte_USART
				
				pop r16
				pop r18
				popY
ret ;}
SendDebugINFO_PB3: ;{ 	;; отправляем рабочие регистры из внутренней EEPROM на PB3 (а ля RS232)
				pushY
				push r18
				push r16

				LdiY(eDEBUG_INFO)
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte
				adiw yl,1
				rcall Load_eY_r18
				mov r16,r18
				rcall Debug_Send_Byte

				pop r16
				pop r18
				popY
ret ;}
SendDebugINFO_PC: ;{ 	;; отправляем рабочие регистры из внутренней EEPROM по USART в компьютер
				pushX
				pushY
				push r18

				LdiX(buf_TX)
				LdiY(eDEBUG_INFO)
				ldi r18,8
				st x+,r18
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				adiw yl,1
				rcall Load_eY_r18
				st x+,r18
				rcall SetCheckSummTX
				rcall SendTX
				
				pop r18
				popY
				popX
ret ;}

Load_eY_r18: ;{			;; чтение из EEPROM Y => адрес и r18 выходные данные
				sbic EECR,EEWE		;; можно ли записывать адрес
				rjmp Load_eY_r18		;; выждем процесс прошлой записи ~3,4мс
				out EEARH,yh
				out EEARL,yl
				sbi EECR,EERE
				in r18,EEDR
ret ;}
Save_r18_eY: ;{			;; сохранение: r18(данные) => Y(адрес EEPROM) ; 
				sbic EECR,EEWE		;; можно ли записывать адрес
				rjmp Save_r18_eY			;; выждем процесс прошлой записи ~3,4мс
				out EEARH,yh
				out EEARL,yl
				out EEDR,r18
				sbi EECR,EEMWE
				sbi EECR,EEWE
ret ;}

;{	;; функции для работы с внутренней EEPROM
;; BufferCat3_Ye_X: ;{		;; копирует 3 байта(Ye) в буфер X
;; ;; r16 - смещение на позицию начала записи. По окончании указатель X возвращается на начало,
;; ;; к r16 прибавляется длина добавленной строки
;; ;; счетчик буфера увеличивается на длину записываемой строки
				;; push r17
				;; push r18

				;; ldi r17,3
				;; pushX
				;; adiw xl,1
				;; AdrX r16
	;; bfc3yx01:
				;; rcall Load_eY_r18
				;; st x+,r18
				;; adiw yl,1
				;; dec r17
				;; brne bfc3yx01
				
				;; subi r16,-3
				;; popX
				;; st x,r16

				;; pop r18
				;; pop r17
;; ret ;}
;; Copy3_X_Ye: ;{			;;запись из ОЗУ(X) в EEPROM(Ye) 3 байтов. На выходе указатели восстанавливаются
				;; push r18
				;; push r17
				
				;; ldi r17,3
	;; cp3xye01:
				;; ld r18,x+
				;; rcall Save_r18_eY
				;; adiw yl,1
				;; dec r17
				;; brne cp3xye01

				;; sbiw xl,3
				;; sbiw yl,3

				;; pop r17
				;; pop r18
;; ret ;}
;; Copy3_Ye_X: ;{			;;чтение из EEPROM(Ye) в ОЗУ(X) 3 байтов. На выходе указатели восстанавливаются
				;; push r18
				;; push r17
				
				;; ldi r17,3
	;; cp3yex01:
				;; rcall Load_eY_r18
				;; st x+,r18
				;; adiw yl,1
				;; dec r17
				;; brne cp3yex01

				;; sbiw xl,3
				;; sbiw yl,3

				;; pop r17
				;; pop r18
;; ret ;}
;; Copy3_Zm_Ye: ;{			;; перенос из PROGMEM(Z) в EEPROM(Ye) 3 байтов. На выходе указатели восстанавливаются
				;; push r18
				;; push r17

				;; ldi r17,3
	;; cp3zmye01:
				;; lpm r18,z+
				;; rcall Save_r18_eY
				;; adiw yl,1
				;; dec r17
				;; brne cp3zmye01

				;; sbiw xl,3
				;; sbiw zl,3

				;; pop r17
				;; pop r18
;; ret ;}
;}
;{	;; устаревшие функции
;; Debug_Send_bufRX_toRS: ;{ 	;; отправка содержимого буфера buf_RX по RS232. buf_RX[0] - кол-во отправляемых байтов
				;; pushZ
				;; push r16
				;; push r17
				
				;; LdiZ(buf_RX)
				;; ld r17,z+
	;; dbgsndrx01:	
				;; ld r16,z+
				;; rcall Debug_Send_Byte
				;; dec r17
				;; brne dbgsndrx01

				;; pop r17
				;; pop r16
				;; popZ
;; ret ;}
;; BufferCatString_Zm_X: ;{;; копирует строку(Zm) в буфер X
;; ;; r16 - смещение на позицию начала записи. По окончании указатель X возвращается на начало,
;; ;; к r16 прибавляется длина добавленной строки
;; ;; счетчик буфера увеличивается на длину записываемой строки
				;; push r17
				;; push r18
				;; push r19

				;; lpm r17,z+		;;загрузили длину строки
				;; mov r19,r17
				;; pushX
				;; adiw xl,1
				;; AdrX r16
	;; bfcszx01:
				;; lpm r18,z+
				;; st x+,r18
				;; dec r19
				;; brne bfcszx01
				
				;; add r16,r17
				;; popX
				;; st x,r16

				;; pop r19
				;; pop r18
				;; pop r17
;; ret ;}
;; BufferCat3_Y_X: ;{		;; копирует 3 байта(Y) в буфер X, указатели восстанавливаются
;; ;; r16 - смещение на позицию начала записи.
;; ;; к r16 прибавляется длина добавленной строки
;; ;; счетчик буфера увеличивается на длину записываемой строки
				;; push r17
				;; push r18

				;; ldi r17,3
				;; pushX
				;; pushY
				;; adiw xl,1
				;; AdrX r16
	;; bfc3yx02:
				;; ld r18,y+
				;; st x+,r18
				;; dec r17
				;; brne bfc3yx02
				
				;; subi r16,-3
				;; popY
				;; popX
				;; st x,r16

				;; pop r18
				;; pop r17
;; ret ;}
;; Compare_SubString: ;{		;; поиск первого вхождения подстроки в буфере. zh,zl - индекс подстроки(lpm)
;; возвращает в r16 индекс начала первого вхождения подстроки (с 0). 0xFF - если подстрока не найдена
				;; push r23
				;; push r22
				;; push r21
				;; push r20
				;; push r19
				;; push r18
				;; push r17
				;; pushX
				;; in r17,SREG
				;; push r17
				
				;; clr r16			;; индекс перемещения по буферу глобальный (за весь поиск проходит 1 раз)
				;; clr r17			;; индекс перемещения по буферу временный
				;; clr r23			;; индекс перемещения по подстроке временный
				;; lpm r18,z+		;; байтов в подстроке, z индекс находится на первом байте подстроки

	;; css00:		
				;; mov r22,r18
				;; LdiX(buf_RX)
				;; ld r19,x+		;; загрузим кол-во байт в буфере, x индекс находится на первом байте подстроки
				;; AdrX r16
				;; mov r17,r16		;; сохраним копию индекса смещения по буферу
				;; SbrZ r23
				;; clr r23
	;; css02:		
				;; cp r17,r19		;; если индекс вышел за пределы буфера
				;; breq cssFail
				;; inc r23
				;; inc r17
				;; lpm r20,z+		;; байт подстроки
				;; ld r21,x+		;; байт буфера
				;; cp r21,r20
				;; brne css01
				;; dec r22
				;; brne css02		;; если не индекс вышел за пределы подстроки
				;; rjmp cssExit	;; подстрока найдена

	;; css01:		;;символ не совпал, начинаем сначала но со следующей позицией в буфере
				;; inc r16			;;начнем со следующего байта в буфере
				;; rjmp css00
	;; cssFail:
				;; ser r16		;; 0xFF - ничего не найдено
	;; cssExit:
				;; pop r17
				;; out SREG,r17
				;; popX
				;; pop r17
				;; pop r18
				;; pop r19
				;; pop r20
				;; pop r21
				;; pop r22
				;; pop r23
;; ret ;}
;; CheckSUMM: ;{		;; проверка контрольной суммы в сообщении
				;; push r18
				;; push r17
				;; push r16

				;; clr r18
				;; LdiZ(buf_RX)
				;; ld r17,z+  			;; загрузим счетчик буфера с постинкрементом указателя
							;; dec r17
				;; tst r17
				;; breq chcksm01
	;; chcksm02:			
				;; ld r16,z+  			;; загрузим байт из буфера
				;; add r18,r16
				;; dec r17
				;; brne chcksm02
				;; ld r16,z+  			;; загрузим последний байт из буфера - контрольная сумма
				;; cp r18,r16
				;; breq chcksm01
				;; SetBit ERROR,6		;; (6 бит)ошибка контрольной суммы в сообщении
	;; chcksm01:
				;; pop r16
				;; pop r17
				;; pop r18
;; ret ;}
;}


